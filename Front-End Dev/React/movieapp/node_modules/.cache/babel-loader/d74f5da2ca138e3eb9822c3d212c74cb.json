{"ast":null,"code":"var _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/Review.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Table, Jumbotron, Container, Row, Col, Button } from 'react-bootstrap';\nimport { MDBCardImage } from \"mdbreact\";\nimport './Review.css';\n\nclass Review extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      review_result: '',\n      movie_is_details: this.props.location.state.selected_movie,\n      imdb_id: '',\n      movie_omdb_details: {},\n      apikeyIS: '5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK',\n      //api key of international showtimes\n      apikeyOMDB: '9e790f8b',\n      rating_result: ''\n    }; // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.state.movie_is_details);\n    this.getIMDBId();\n  }\n\n  displayDetail() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n\n    if (this.state.movie_omdb_details.Title) {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(MDBCardImage, {\n        className: \"img-fluid pb-3 float-left\",\n        src: this.state.movie_omdb_details.Poster,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xs: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.state.movie_omdb_details.Title), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Release date:\"), \"  \", this.state.movie_omdb_details.Released, \"  \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Average Rating:\"), \"  \", this.state.rating_result.avg_rating + \"%\", \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"IMDB Rating:\"), \"  \", this.state.rating_result.imdb_rating + \"%\", \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Metacritic Rating:\"), \"  \", this.state.rating_result.metacritic_rating + \"%\", \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Rotten Tomato Rating:\"), \"  \", this.state.rating_result.rotten_rating + \"%\", \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Runtime:\"), \"  \", this.state.movie_omdb_details.Runtime, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Rated:\"), \"  \", this.state.movie_omdb_details.Rated, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Genre:\"), \"  \", this.state.movie_omdb_details.Genre, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Director:\"), \"  \", this.state.movie_omdb_details.Director, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Production:\"), \"  \", this.state.movie_omdb_details.Production, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \" \", React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Language:\"), \"  \", this.state.movie_omdb_details.Language, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Plot:\"), \" \", this.state.movie_omdb_details.Plot)))));\n    }\n  }\n\n  displayResult() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n\n    if (this.state.review_result.rawReviews) {\n      var reviews = this.state.review_result.rawReviews; // return this.state.review_result.rawReviews[0].author;\n\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Reviews\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Total Reviews\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, reviews.length)), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Sentiment Result\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.state.review_result.sentiment_tag))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), reviews.map((value, index) => React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, value.author), \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \" \", value.content, \" \"))))));\n    } else {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })), React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 12,\n        xOffset: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })))));\n    }\n  }\n\n  render() {\n    // const test = this.getData;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, this.displayDetail(), this.displayResult(), console.log(this.state.review_result));\n  }\n\n  getIMDBId() {\n    var movie_id = this.state.movie_is_details.id;\n    var xhr = new XMLHttpRequest();\n    let urlmoviedetails = \"https://api.internationalshowtimes.com/v4/movies/\" + movie_id + \"?fields=imdb_id&apikey=\" + this.state.apikeyIS;\n    xhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      var resp = JSON.parse(xhr.responseText);\n      this.setState({\n        imdb_id: resp.movie.imdb_id\n      }, () => {\n        this.getReviewResult();\n      });\n      var xhr2 = new XMLHttpRequest(); //get movie details from imdb\n\n      let urlMovieDetails = \"http://www.omdbapi.com/?i=\" + this.state.imdb_id + \"&apikey=\" + this.state.apikeyOMDB;\n      xhr2.addEventListener('load', () => {\n        // update the state of the component with the result here\n        var resp = JSON.parse(xhr2.responseText);\n        this.setState({\n          movie_omdb_details: resp\n        }, () => {\n          this.getAverageRating();\n        });\n        console.log(this.state);\n      });\n      xhr2.open('GET', urlMovieDetails);\n      xhr2.send();\n    });\n    xhr.open('GET', urlmoviedetails);\n    xhr.send();\n  }\n\n  getAverageRating() {\n    var ratings = this.state.movie_omdb_details.Ratings;\n    console.log(ratings);\n    var imdbRating = this.state.movie_omdb_details.imdbRating * 10;\n    var rottenRating = ratings[1].Value.replace(\"%\", \"\") * 1;\n    var metacriticRating = this.state.movie_omdb_details.Metascore * 1;\n    var avgRating = (imdbRating + rottenRating + metacriticRating) / 3;\n    var ratings = {\n      imdb_rating: imdbRating,\n      rotten_rating: rottenRating,\n      metacritic_rating: metacriticRating,\n      avg_rating: avgRating\n    };\n    this.setState({\n      rating_result: ratings\n    });\n  }\n\n  getReviewResult() {\n    var imdb_id = this.state.imdb_id;\n    console.log(imdb_id);\n    var results = \"nil\";\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        console.log(\"yo\");\n        var dataObj = JSON.parse(this.responseText);\n        console.log(dataObj);\n        results = dataObj;\n        that.setState({\n          review_result: results\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/review.php?imdb_id=\" + imdb_id, true);\n    request.send();\n  }\n\n}\n\nexport default Review;","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/Review.js"],"names":["React","axios","Table","Jumbotron","Container","Row","Col","Button","MDBCardImage","Review","Component","constructor","props","state","review_result","movie_is_details","location","selected_movie","imdb_id","movie_omdb_details","apikeyIS","apikeyOMDB","rating_result","componentDidMount","console","log","getIMDBId","displayDetail","bold","fontWeight","center","textAlign","Title","Poster","Released","avg_rating","imdb_rating","metacritic_rating","rotten_rating","Runtime","Rated","Genre","Director","Production","Language","Plot","displayResult","rawReviews","reviews","length","sentiment_tag","map","value","index","author","content","render","movie_id","id","xhr","XMLHttpRequest","urlmoviedetails","addEventListener","resp","JSON","parse","responseText","setState","movie","getReviewResult","xhr2","urlMovieDetails","getAverageRating","open","send","ratings","Ratings","imdbRating","rottenRating","Value","replace","metacriticRating","Metascore","avgRating","results","that","request","onreadystatechange","readyState","status","dataObj"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Table, Jumbotron, Container, Row, Col, Button } from 'react-bootstrap';\nimport { MDBCardImage } from \"mdbreact\";\nimport './Review.css'\n\nclass Review extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            review_result: '',\n            movie_is_details: this.props.location.state.selected_movie,\n            imdb_id: '',\n            movie_omdb_details: {},\n            apikeyIS: '5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK', //api key of international showtimes\n            apikeyOMDB: '9e790f8b',\n            rating_result: '',\n        };\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(this.state.movie_is_details)\n        this.getIMDBId();\n    }\n\n    displayDetail() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n        if (this.state.movie_omdb_details.Title) {\n\n\n            return (\n\n                <Jumbotron fluid>\n\n                    <Container>\n                        <Row>\n                            <Col>\n\n\n                                <MDBCardImage\n                                    className=\"img-fluid pb-3 float-left\"\n                                    src={this.state.movie_omdb_details.Poster}\n                                />\n\n                            </Col>\n                            <Col xs={7}>\n\n                                <h1>{this.state.movie_omdb_details.Title}</h1>\n\n                                <p><span style={bold}>Release date:</span>  {this.state.movie_omdb_details.Released}  </p>\n                                <p> <span style={bold}>Average Rating:</span>  {this.state.rating_result.avg_rating+\"%\"} </p>\n                                <p> <span style={bold}>IMDB Rating:</span>  {this.state.rating_result.imdb_rating+\"%\"} </p>\n                                <p> <span style={bold}>Metacritic Rating:</span>  {this.state.rating_result.metacritic_rating+\"%\"} </p>\n                                <p> <span style={bold}>Rotten Tomato Rating:</span>  {this.state.rating_result.rotten_rating+\"%\"} </p>\n\n\n                                <p> <span style={bold}>Runtime:</span>  {this.state.movie_omdb_details.Runtime} </p>\n                                <p> <span style={bold}>Rated:</span>  {this.state.movie_omdb_details.Rated} </p>\n                                <p> <span style={bold}>Genre:</span>  {this.state.movie_omdb_details.Genre} </p>\n                                <p> <span style={bold}>Director:</span>  {this.state.movie_omdb_details.Director} </p>\n                                <p> <span style={bold}>Production:</span>  {this.state.movie_omdb_details.Production} </p>\n                                <p> <span style={bold}>Language:</span>  {this.state.movie_omdb_details.Language} </p>\n\n                                <p><span style={bold}>Plot:</span> {this.state.movie_omdb_details.Plot}</p>\n\n\n                            </Col>\n\n\n                        </Row>\n\n                    </Container>\n                </Jumbotron>\n\n\n\n            )\n        }\n    }\n\n    displayResult() {\n\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n\n        if (this.state.review_result.rawReviews) {\n\n            var reviews = this.state.review_result.rawReviews;\n            // return this.state.review_result.rawReviews[0].author;\n\n            return (\n\n                <Jumbotron fluid>\n\n                    <Container>\n                        <Row>\n                            <Col >\n                                <h2>Reviews</h2>\n\n                            </Col>\n                        </Row>\n                        <br/>\n                        <Row>\n                            <Col >\n                                <p><span style={bold}>Total Reviews</span></p>\n                                <p>{reviews.length}</p>\n                            </Col>\n                            <Col >\n                                <p><span style={bold}>Sentiment Result</span></p>\n                                <p>{this.state.review_result.sentiment_tag}</p>\n                            </Col>\n\n                        </Row>\n\n                        <br />\n\n                        {reviews.map((value, index) => (\n                            <Row>\n                                <Col >\n\n                                    <p><span style={bold}>{value.author}</span> </p>\n                                    <p> {value.content} </p>\n                                </Col>\n                            </Row>\n\n                        ))}\n\n                    </Container>\n                </Jumbotron>\n\n\n\n            )\n\n        } else {\n            return (\n\n                <Jumbotron fluid>\n\n                    <Container>\n\n                        <Row>\n                            <Col >\n                                {/* <h2>Reviews</h2> */}\n\n                            </Col>\n                        </Row>\n\n                        <Row className=\"show-grid\" >\n\n\n                            <Col md={12} xOffset={6}>\n                                <div className=\"loader\"></div>\n\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n\n                </Jumbotron>\n\n\n\n            )\n\n        }\n    }\n    render() {\n\n        // const test = this.getData;\n        return (\n\n            <div>\n                {this.displayDetail()}\n                {this.displayResult()}\n                {console.log(this.state.review_result)}\n                {/* <h1>{this.state.name}</h1> */}\n            </div>\n\n        )\n\n    }\n\n    getIMDBId() {\n        var movie_id = this.state.movie_is_details.id;\n        var xhr = new XMLHttpRequest();\n        let urlmoviedetails = \"https://api.internationalshowtimes.com/v4/movies/\" + movie_id + \"?fields=imdb_id&apikey=\" + this.state.apikeyIS;\n\n        xhr.addEventListener('load', () => {\n            // update the state of the component with the result here\n            var resp = JSON.parse(xhr.responseText);\n            this.setState({\n                imdb_id: resp.movie.imdb_id,\n            }, () => {\n                this.getReviewResult();\n            });\n\n            var xhr2 = new XMLHttpRequest()\n\n            //get movie details from imdb\n            let urlMovieDetails = \"http://www.omdbapi.com/?i=\" + this.state.imdb_id + \"&apikey=\" + this.state.apikeyOMDB;\n            xhr2.addEventListener('load', () => {\n                // update the state of the component with the result here\n\n\n                var resp = JSON.parse(xhr2.responseText);\n                this.setState({\n                    movie_omdb_details: resp,\n                }, () => {\n                    this.getAverageRating();\n                });\n\n                console.log(this.state);\n            })\n            xhr2.open('GET', urlMovieDetails)\n            xhr2.send()\n\n        })\n        xhr.open('GET', urlmoviedetails)\n        xhr.send()\n    }\n\n    getAverageRating() {\n        var ratings = this.state.movie_omdb_details.Ratings;\n        console.log(ratings)\n\n        var imdbRating = this.state.movie_omdb_details.imdbRating * 10;\n        var rottenRating = ratings[1].Value.replace(\"%\", \"\") * 1\n        var metacriticRating = this.state.movie_omdb_details.Metascore * 1;\n\n        var avgRating = (imdbRating + rottenRating + metacriticRating) / 3;\n\n        var ratings = {\n            imdb_rating: imdbRating,\n            rotten_rating: rottenRating,\n            metacritic_rating: metacriticRating,\n            avg_rating: avgRating,\n        }\n\n        this.setState({\n            rating_result: ratings,\n        })\n\n    }\n\n    getReviewResult() {\n        var imdb_id = this.state.imdb_id;\n        console.log(imdb_id);\n        var results = \"nil\";\n        var that = this;\n        var request = new XMLHttpRequest();\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                console.log(\"yo\")\n                var dataObj = JSON.parse(this.responseText);\n                console.log(dataObj);\n                results = dataObj;\n                that.setState({\n                    review_result: results\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/review.php?imdb_id=\" + imdb_id, true);\n        request.send();\n\n\n\n    }\n\n}\n\nexport default Review;"]},"metadata":{},"sourceType":"module"}