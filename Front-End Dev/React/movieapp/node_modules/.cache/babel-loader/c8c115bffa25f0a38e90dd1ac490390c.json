{"ast":null,"code":"import _defineProperty from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/SearchBar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Redirect } from 'react-router';\nconst suggestions = [];\nconst movieList = [];\nconst apikey = \"7UiR6NYdJicQiXms2GOxJSqBddHXuivw\";\n\nfunction setMovieArr(input) {\n  var result_id = '';\n  movieList.length = 0;\n\n  for (let i = 0; i < suggestions.length; i++) {\n    var cinema = suggestions[i];\n\n    if (cinema.label.toLowerCase() == input.toLowerCase()) {\n      result_id = cinema.id;\n    }\n  }\n\n  if (result_id != '') {\n    //in case api is down uncomment below (must choose amk hub)\n    // var data = require('./backupjson/allmoviesamk.json');\n    // for (let i = 0; i < data.movies.length; i++) {\n    //     var movie = data.movies[i];\n    //     movieList.push(movie);\n    // }\n    //api method\n    var xhr = new XMLHttpRequest();\n    let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=\" + apikey;\n    xhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      var resp = JSON.parse(xhr.responseText);\n\n      for (let i = 0; i < resp.movies.length; i++) {\n        var movie = resp.movies[i];\n        movieList.push(movie);\n      }\n    });\n    xhr.open('GET', url);\n    xhr.send();\n  }\n}\n\nfunction checkDisable() {\n  if (movieList.length <= 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction constructCinemasSuggestions() {\n  //in case api down uncomment below\n  // var data = require('./backupjson/getallcinemas.json');\n  // suggestions.length = 0;\n  // for (let i = 0; i < data.cinemas.length; i++) {\n  //     var cinema = data.cinemas[i];\n  //     suggestions.push({\n  //         label: cinema.name,\n  //         id: cinema.id,\n  //         city_id: cinema.city_id,\n  //     });\n  // }\n  //api method\n  var xhr = new XMLHttpRequest();\n  let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + apikey;\n  xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    var resp = JSON.parse(xhr.responseText); //   this.setState({ results: resp.cinemas[0].location });\n\n    var cinemasArr = [];\n    suggestions.length = 0;\n\n    for (let i = 0; i < resp.cinemas.length; i++) {\n      var cinema = resp.cinemas[i];\n      suggestions.push({\n        label: cinema.name,\n        id: cinema.id,\n        city_id: cinema.city_id\n      });\n    }\n\n    console.log(suggestions);\n  });\n  xhr.open('GET', url);\n  xhr.send();\n}\n\nfunction renderInputComponent(inputProps) {\n  const classes = inputProps.classes,\n        _inputProps$inputRef = inputProps.inputRef,\n        inputRef = _inputProps$inputRef === void 0 ? () => {} : _inputProps$inputRef,\n        ref = inputProps.ref,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    name: \"cinema\",\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }));\n}\n\nfunction renderSuggestion(suggestion, {\n  query,\n  isHighlighted\n}) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n  return React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, parts.map(part => React.createElement(\"span\", {\n    key: part.text,\n    style: {\n      fontWeight: part.highlight ? 500 : 400\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, part.text))));\n}\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 100,\n    flexGrow: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginBottom: 10\n  },\n  formControl: {\n    margin: theme.spacing(3),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    width: 250\n  },\n  container: {\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n    width: 250\n  },\n  suggestion: {\n    display: 'block',\n    cursor: 'pointer'\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  },\n  divider: {\n    height: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    width: 250\n  }\n}));\nexport default function IntegrationAutosuggest() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState({\n    single: '',\n    popper: '',\n    redirect: false\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const _React$useState3 = React.useState({\n    movie: ''\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        values = _React$useState4[0],\n        setValues = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        stateSuggestions = _React$useState6[0],\n        setSuggestions = _React$useState6[1];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const handleSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const handleChange = name => (event, {\n    newValue\n  }) => {\n    setState(_objectSpread({}, state, {\n      [name]: newValue\n    }));\n    setMovieArr(newValue);\n  };\n\n  const handleSelectChange = event => {\n    setValues(oldValues => _objectSpread({}, oldValues, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"cinema name: \", state.single, \"movie: \", values.movie);\n\n    if (values.movie == '') {\n      // window.alert('Please enter a valid cinema and movie!');\n      document.getElementById(\"error\").innerHTML = \"Please enter a valid cinema and movie!\";\n    } else {\n      setState(_objectSpread({}, state, {\n        ['redirect']: true\n      }));\n    }\n  };\n\n  if (state.redirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      from: \"/\",\n      to: {\n        pathname: '/showtimes',\n        state: {\n          cinema: state.single,\n          movie_id: values.movie\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, constructCinemasSuggestions(), React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: classes.root,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n    inputProps: {\n      classes,\n      id: 'react-autosuggest-simple',\n      label: 'Cinema',\n      placeholder: 'Search a cinema',\n      value: state.single,\n      onChange: handleChange('single')\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderSuggestionsContainer: options => React.createElement(Paper, Object.assign({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    id: \"error\",\n    style: {\n      color: \"red\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, React.createElement(Select, {\n    value: values.movie,\n    onChange: handleSelectChange,\n    name: \"movie\",\n    displayEmpty: true,\n    className: classes.selectEmpty,\n    label: \"Movie\",\n    disabled: checkDisable() ? true : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, \"Select Movie\"), movieList.map((movie, index) => React.createElement(MenuItem, {\n    key: index,\n    value: movie.id,\n    name: \"movie\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }, \" \", movie.title)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.button,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378\n    },\n    __self: this\n  }, \"Show Showtimes\")))));\n}","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/SearchBar.js"],"names":["React","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","makeStyles","Button","Grid","FormControl","Select","Redirect","suggestions","movieList","apikey","setMovieArr","input","result_id","length","i","cinema","label","toLowerCase","id","xhr","XMLHttpRequest","url","addEventListener","resp","JSON","responseText","movies","movie","push","open","send","checkDisable","constructCinemasSuggestions","cinemasArr","cinemas","name","city_id","console","log","renderInputComponent","inputProps","classes","inputRef","ref","other","node","renderSuggestion","suggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","getSuggestions","value","inputValue","trim","inputLength","count","filter","keep","slice","getSuggestionValue","useStyles","theme","root","height","flexGrow","display","flexWrap","marginBottom","formControl","margin","spacing","minWidth","selectEmpty","marginTop","width","container","position","suggestionsContainerOpen","zIndex","left","right","cursor","suggestionsList","padding","listStyleType","divider","button","IntegrationAutosuggest","useState","single","popper","redirect","state","setState","values","setValues","stateSuggestions","setSuggestions","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","event","newValue","handleSelectChange","oldValues","target","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","handleSubmit","preventDefault","document","getElementById","innerHTML","pathname","movie_id","placeholder","onChange","options","containerProps","children","color","index","title"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport deburr from 'lodash/deburr';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Redirect } from 'react-router';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst suggestions = [];\r\nconst movieList = [];\r\nconst apikey = \"7UiR6NYdJicQiXms2GOxJSqBddHXuivw\";\r\n\r\nfunction setMovieArr(input) {\r\n    var result_id = '';\r\n    movieList.length = 0;\r\n    for (let i = 0; i < suggestions.length; i++) {\r\n        var cinema = suggestions[i];\r\n        if (cinema.label.toLowerCase() == input.toLowerCase()) {\r\n            result_id = cinema.id;\r\n        }\r\n    }\r\n\r\n    if (result_id != '') {\r\n\r\n        //in case api is down uncomment below (must choose amk hub)\r\n\r\n        // var data = require('./backupjson/allmoviesamk.json');\r\n        // for (let i = 0; i < data.movies.length; i++) {\r\n        //     var movie = data.movies[i];\r\n        //     movieList.push(movie);\r\n        // }\r\n\r\n        //api method\r\n        var xhr = new XMLHttpRequest()\r\n        let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=\" + apikey;\r\n        xhr.addEventListener('load', () => {\r\n            // update the state of the component with the result here\r\n            var resp = JSON.parse(xhr.responseText);\r\n\r\n\r\n            for (let i = 0; i < resp.movies.length; i++) {\r\n                var movie = resp.movies[i];\r\n                movieList.push(movie);\r\n            }\r\n\r\n        })\r\n        xhr.open('GET', url)\r\n        xhr.send()\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction checkDisable() {\r\n    if (movieList.length <= 0) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction constructCinemasSuggestions() {\r\n\r\n    //in case api down uncomment below\r\n\r\n    // var data = require('./backupjson/getallcinemas.json');\r\n    // suggestions.length = 0;\r\n    // for (let i = 0; i < data.cinemas.length; i++) {\r\n    //     var cinema = data.cinemas[i];\r\n    //     suggestions.push({\r\n    //         label: cinema.name,\r\n    //         id: cinema.id,\r\n    //         city_id: cinema.city_id,\r\n    //     });\r\n    // }\r\n\r\n    //api method\r\n    var xhr = new XMLHttpRequest()\r\n    let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + apikey;\r\n    xhr.addEventListener('load', () => {\r\n        // update the state of the component with the result here\r\n        var resp = JSON.parse(xhr.responseText);\r\n        //   this.setState({ results: resp.cinemas[0].location });\r\n        var cinemasArr = [];\r\n        suggestions.length = 0;\r\n        for (let i = 0; i < resp.cinemas.length; i++) {\r\n            var cinema = resp.cinemas[i];\r\n            suggestions.push({\r\n                label: cinema.name,\r\n                id: cinema.id,\r\n                city_id: cinema.city_id,\r\n            });\r\n        }\r\n        console.log(suggestions);\r\n\r\n    })\r\n    xhr.open('GET', url)\r\n    xhr.send()\r\n\r\n}\r\n\r\nfunction renderInputComponent(inputProps) {\r\n    const { classes, inputRef = () => { }, ref, ...other } = inputProps;\r\n\r\n    return (\r\n        <TextField\r\n            name=\"cinema\"\r\n            InputProps={{\r\n                inputRef: node => {\r\n                    ref(node);\r\n                    inputRef(node);\r\n                },\r\n                classes: {\r\n                    input: classes.input,\r\n                },\r\n            }}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n    const matches = match(suggestion.label, query);\r\n    const parts = parse(suggestion.label, matches);\r\n\r\n    return (\r\n        <MenuItem selected={isHighlighted} component=\"div\">\r\n            <div>\r\n                {parts.map(part => (\r\n                    <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\r\n                        {part.text}\r\n                    </span>\r\n                ))}\r\n            </div>\r\n        </MenuItem>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction getSuggestions(value) {\r\n    const inputValue = deburr(value.trim()).toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    let count = 0;\r\n\r\n    return inputLength === 0\r\n        ? []\r\n        : suggestions.filter(suggestion => {\r\n            const keep =\r\n                count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n            if (keep) {\r\n                count += 1;\r\n            }\r\n\r\n            return keep;\r\n        });\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n    return suggestion.label;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: 100,\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        marginBottom: 10,\r\n\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(3),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n        width: 250,\r\n    },\r\n    container: {\r\n        position: 'relative',\r\n    },\r\n    suggestionsContainerOpen: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        marginTop: theme.spacing(1),\r\n        left: 0,\r\n        right: 0,\r\n        width: 250,\r\n    },\r\n    suggestion: {\r\n        display: 'block',\r\n        cursor: 'pointer',\r\n    },\r\n    suggestionsList: {\r\n        margin: 0,\r\n        padding: 0,\r\n        listStyleType: 'none',\r\n    },\r\n    divider: {\r\n        height: theme.spacing(2),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n        width: 250,\r\n    }\r\n}));\r\n\r\n\r\n\r\nexport default function IntegrationAutosuggest() {\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useState({\r\n        single: '',\r\n        popper: '',\r\n        redirect: false,\r\n    });\r\n\r\n    const [values, setValues] = React.useState({\r\n        movie: '',\r\n    });\r\n\r\n\r\n    const [stateSuggestions, setSuggestions] = React.useState([]);\r\n\r\n\r\n\r\n    const handleSuggestionsFetchRequested = ({ value }) => {\r\n        setSuggestions(getSuggestions(value));\r\n    };\r\n\r\n\r\n    const handleSuggestionsClearRequested = () => {\r\n        setSuggestions([]);\r\n    };\r\n\r\n    const handleChange = name => (event, { newValue }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: newValue,\r\n        });\r\n        setMovieArr(newValue);\r\n    };\r\n\r\n    const handleSelectChange = event => {\r\n\r\n        setValues(oldValues => ({\r\n            ...oldValues,\r\n            [event.target.name]: event.target.value,\r\n        }));\r\n    };\r\n\r\n    const autosuggestProps = {\r\n        renderInputComponent,\r\n        suggestions: stateSuggestions,\r\n        onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\r\n        onSuggestionsClearRequested: handleSuggestionsClearRequested,\r\n        getSuggestionValue,\r\n        renderSuggestion,\r\n    };\r\n\r\n\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        console.log(\"cinema name: \", state.single, \"movie: \", values.movie);\r\n\r\n        if (values.movie == '') {\r\n            // window.alert('Please enter a valid cinema and movie!');\r\n            document.getElementById(\"error\").innerHTML = \"Please enter a valid cinema and movie!\";\r\n        } else {\r\n            setState({\r\n                ...state,\r\n                ['redirect']: true,\r\n            });\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    if (state.redirect) {\r\n        return (\r\n\r\n            <Redirect push from='/' to={{\r\n                pathname: '/showtimes',\r\n                state: {\r\n                    cinema: state.single,\r\n                    movie_id: values.movie,\r\n                }\r\n            }} />\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <Grid container justify=\"center\">\r\n            {constructCinemasSuggestions()}\r\n\r\n            <Grid>\r\n                <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit}>\r\n\r\n                    <FormControl className={classes.formControl} >\r\n                        <Autosuggest\r\n\r\n                            {...autosuggestProps}\r\n                            inputProps={{\r\n                                classes,\r\n                                id: 'react-autosuggest-simple',\r\n                                label: 'Cinema',\r\n                                placeholder: 'Search a cinema',\r\n                                value: state.single,\r\n                                onChange: handleChange('single'),\r\n                            }}\r\n                            theme={{\r\n                                container: classes.container,\r\n                                suggestionsContainerOpen: classes.suggestionsContainerOpen,\r\n                                suggestionsList: classes.suggestionsList,\r\n                                suggestion: classes.suggestion,\r\n                            }}\r\n\r\n                            renderSuggestionsContainer={options => (\r\n                                <Paper {...options.containerProps} square>\r\n                                    {options.children}\r\n                                </Paper>\r\n                            )}\r\n                        />\r\n\r\n                        <span id=\"error\" style={{ color: \"red\" }}></span>\r\n                    </FormControl>\r\n\r\n                    <FormControl className={classes.formControl}>\r\n                        <Select\r\n                            value={values.movie}\r\n                            onChange={handleSelectChange}\r\n                            name=\"movie\"\r\n                            displayEmpty\r\n                            className={classes.selectEmpty}\r\n                            label='Movie'\r\n                            disabled={checkDisable() ? true : null}\r\n                        >\r\n                            <MenuItem value=\"\" disabled>\r\n                                Select Movie\r\n                        </MenuItem>\r\n                            {movieList.map((movie, index) =>\r\n                                <MenuItem key={index} value={movie.id} name=\"movie\" > {movie.title}</MenuItem>\r\n                            )}\r\n                        </Select>\r\n\r\n                    </FormControl>\r\n\r\n                    <FormControl className={classes.formControl}>\r\n\r\n                        <Button variant=\"contained\" color=\"secondary\" className={classes.button} type=\"submit\">\r\n                            Show Showtimes\r\n                </Button>\r\n                    </FormControl>\r\n\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n\r\n\r\n    );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}