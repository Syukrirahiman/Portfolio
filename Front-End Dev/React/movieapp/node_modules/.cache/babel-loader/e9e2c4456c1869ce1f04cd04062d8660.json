{"ast":null,"code":"var _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/PlanToMeet.js\";\nimport React from 'react';\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap'; // import Button from '@material-ui/core/Button';\n\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\nclass PlanToMeet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      planid: 222222,\n      result_arr: [],\n      email: '',\n      participant: '',\n      showForm: false,\n      cinema: '',\n      movie: '',\n      showtimeSelect: '',\n      showResult: false,\n      resultVote: [],\n      participants: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSubmitVote = this.handleSubmitVote.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"hey\");\n    var planid = this.state.planid;\n    var email = encodeURI(this.state.email);\n    var params = \"planid=\" + planid + \"&email=\" + email;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var participantObj = JSON.parse(this.responseText);\n        console.log(participantObj);\n        that.setState({\n          participant: participantObj,\n          showForm: true\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/addparticipant.php?\" + params, true);\n    request.send();\n  }\n\n  handleSubmitVote(event) {\n    event.preventDefault();\n    console.log(\"hey2\");\n    var planid = this.state.planid;\n    var email = encodeURI(this.state.email);\n    var selectedShowtime = encodeURI(this.state.showtimeSelect);\n    console.log(selectedShowtime);\n    var params = \"planid=\" + planid + \"&email=\" + email + \"&selectedShowtime=\" + selectedShowtime;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var voteObj = JSON.parse(this.responseText);\n        console.log(voteObj);\n        that.setState({\n          participant: voteObj\n        }, () => {\n          that.getParticipants();\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/submitvote.php?\" + params, true);\n    request.send();\n  }\n\n  getUpdatedResult() {\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var result = JSON.parse(this.responseText);\n        console.log(result);\n        that.setState({\n          result_arr: result,\n          showtimeSelect: result[0].showtime\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n    request.send();\n  }\n\n  getParticipants() {\n    var planid = this.state.planid;\n    var params = \"planid=\" + planid;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var participantsObj = JSON.parse(this.responseText);\n        console.log(participantsObj);\n        that.setState({\n          participants: participantsObj,\n          showResult: true\n        }, () => {\n          that.getUpdatedResult();\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrieveparticipants.php?\" + params, true);\n    request.send();\n  }\n\n  displayResult() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n    const centralize = {\n      margin: \"auto\",\n      width: \"50%\",\n      textAlign: 'center',\n      paddingTop: \"30px\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Result for Plan ID: \", this.state.planid), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.state.participants.map((value, index) => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.displayShowtimeVote(value)) //    <p>{value.email} has voted for {this.printDate(value.showtimeVoted)} </p> \n    )), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \" \", React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \" \", React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"S/No\"), \" \", React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Show Time\"), \" \", React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Number of votes\")), this.state.result_arr.map((value, index) => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \" \", React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.printDate(value.showtime)), \" \", React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, value.counter)))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), this.displayTimeslotResult())));\n  }\n\n  displayTimeslotResult() {\n    this.getParticipants();\n    var timeslotResults = this.state.result_arr;\n    var highestCount = timeslotResults[0].counter;\n    var result = new Array(timeslotResults[0]);\n\n    for (let i = 1; i < timeslotResults.length; i++) {\n      if (timeslotResults[i].counter == highestCount) {\n        result.push(timeslotResults[i]);\n      } else if (timeslotResults[i].counter > highestCount) {\n        highestCount = timeslotResults[i].counter;\n        result = new Array(timeslotResults[i]);\n      }\n    }\n\n    console.log(result);\n\n    if (result.length > 1) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Higest timeslots are: \"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, result.map((value, index) => React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, this.printDate(value.showtime)) //    <p>{value.email} has voted for {this.printDate(value.showtimeVoted)} </p> \n      )));\n    } else {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Highest timeslot voted is: \", this.printDate(result[0].showtime));\n    }\n  }\n\n  displayShowtimeVote(participant) {\n    if (participant.email == this.state.email) {\n      return \"You have voted for \" + this.printDate(participant.showtimeVoted);\n    }\n\n    return participant.email + \" has voted for \" + this.printDate(participant.showtimeVoted);\n  }\n\n  displayForm() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n    const centralize = {\n      margin: \"auto\",\n      width: \"50%\",\n      textAlign: 'center',\n      paddingTop: \"30px\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Logged in as: \", this.state.email), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Cinema\"), React.createElement(Form.Control, {\n      value: this.state.result_arr[0].cinema,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Movie\"), React.createElement(Form.Control, {\n      value: this.state.result_arr[0].movie,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }))), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridState\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Select Showtime\"), React.createElement(Form.Control, {\n      as: \"select\",\n      name: \"showtimeSelect\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, this.state.result_arr.map((value, index) => React.createElement(\"option\", {\n      value: value.showtime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, this.printDate(value.showtime)))))), React.createElement(\"div\", {\n      style: centralize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      name: \"vote\",\n      onClick: this.handleSubmitVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"Submit Vote\"))))));\n  }\n\n  printDate(stringDate) {\n    var date = new Date(stringDate); // console.log((date.getMonth()+1) + '/' + date.getDate() + '/' +  date.getFullYear())\n\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    stringDate = \"Date: \" + (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear() + \" Time: \" + strTime;\n    return stringDate;\n  }\n\n  getTotalCounts() {\n    var result_arr = this.state.result_arr;\n    var totalCount = parseInt(result_arr[0].counter);\n    console.log(totalCount);\n\n    for (let i = 1; i < result_arr.length; i++) {\n      totalCount += parseInt(result_arr[i].counter);\n      console.log(totalCount);\n    }\n\n    console.log(totalCount);\n    return totalCount;\n  }\n\n  render() {\n    console.log(this.state);\n    console.log(this.state.result_arr.length);\n\n    if (this.state.result_arr.length > 0) {\n      console.log(\"hi\");\n      console.log(this.state.result_arr[0].noOfParticipants);\n      console.log(this.getTotalCounts());\n\n      if (this.getTotalCounts() == this.state.result_arr[0].noOfParticipants) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356\n          },\n          __self: this\n        }, this.displayResult());\n      }\n    }\n\n    if (this.state.showResult) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, this.displayResult());\n    }\n\n    if (this.state.showForm) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, this.displayForm());\n    }\n\n    return React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, \"Share this link to your friend to invite them to vote as well!\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Enter Email to vote\"), React.createElement(Form.Control, {\n      name: \"email\",\n      type: \"email\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      name: \"email\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n  getData() {\n    const queryString = require('query-string');\n\n    const parsed = queryString.parse(this.props.location.search);\n    console.log(parsed.id);\n    this.setState({\n      planid: parsed.id\n    }, () => {\n      this.getDataFromPhp();\n    });\n  }\n\n  getDataFromPhp() {\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var result = JSON.parse(this.responseText);\n        console.log(result);\n        that.setState({\n          result_arr: result,\n          showtimeSelect: result[0].showtime\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n    request.send();\n  } // getUpdatedParticipantsDataFromPhp(){\n  //     var request = new XMLHttpRequest();\n  //     var that = this;\n  //     request.onreadystatechange = function () {\n  //         if (this.readyState == 4 && this.status == 200) {\n  //             var result = JSON.parse(this.responseText);\n  //             console.log(result);\n  //             that.setState({\n  //                 result_arr: result,\n  //             })\n  //         }\n  //     }\n  //     request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n  //     request.send();\n  // }\n\n\n}\n\nexport default PlanToMeet;","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/PlanToMeet.js"],"names":["React","Table","Jumbotron","Container","Row","Col","Button","Form","MDBCardImage","Redirect","PlanToMeet","Component","constructor","props","state","planid","result_arr","email","participant","showForm","cinema","movie","showtimeSelect","showResult","resultVote","participants","handleChange","bind","handleSubmit","handleSubmitVote","componentDidMount","getData","event","target","name","value","setState","preventDefault","console","log","encodeURI","params","that","request","XMLHttpRequest","onreadystatechange","readyState","status","participantObj","JSON","parse","responseText","open","send","selectedShowtime","voteObj","getParticipants","getUpdatedResult","result","showtime","participantsObj","displayResult","bold","fontWeight","center","textAlign","centralize","margin","width","paddingTop","map","index","displayShowtimeVote","printDate","counter","displayTimeslotResult","timeslotResults","highestCount","Array","i","length","push","showtimeVoted","displayForm","stringDate","date","Date","hours","getHours","minutes","getMinutes","ampm","strTime","getMonth","getDate","getFullYear","getTotalCounts","totalCount","parseInt","render","noOfParticipants","queryString","require","parsed","location","search","id","getDataFromPhp"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap';\n// import Button from '@material-ui/core/Button';\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\n\nclass PlanToMeet extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            planid: 222222,\n            result_arr: [],\n            email: '',\n            participant: '',\n            showForm: false,\n            cinema: '',\n            movie: '',\n            showtimeSelect: '',\n            showResult: false,\n            resultVote: [],\n            participants: [],\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleSubmitVote = this.handleSubmitVote.bind(this);\n    }\n\n    componentDidMount() {\n        this.getData();\n\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n\n\n        this.setState({\n            [name]: value,\n        });\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(\"hey\");\n        var planid = this.state.planid;\n        var email = encodeURI(this.state.email);\n        var params = \"planid=\" + planid + \"&email=\" + email;\n\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var participantObj = JSON.parse(this.responseText);\n                console.log(participantObj);\n                that.setState({\n                    participant: participantObj,\n                    showForm: true,\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/addparticipant.php?\" + params, true);\n        request.send();\n\n    }\n\n    handleSubmitVote(event) {\n        event.preventDefault();\n        console.log(\"hey2\")\n        var planid = this.state.planid;\n        var email = encodeURI(this.state.email);\n        var selectedShowtime = encodeURI(this.state.showtimeSelect);\n        console.log(selectedShowtime);\n        var params = \"planid=\" + planid + \"&email=\" + email + \"&selectedShowtime=\" + selectedShowtime;\n\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var voteObj = JSON.parse(this.responseText);\n                console.log(voteObj);\n                that.setState({\n                    participant: voteObj,\n                }, () => {\n                    that.getParticipants();\n                });\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/submitvote.php?\" + params, true);\n        request.send();\n\n\n\n    }\n\n    getUpdatedResult(){\n        var that = this;\n\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var result = JSON.parse(this.responseText);\n                console.log(result);\n                that.setState({\n                    result_arr: result,\n                    showtimeSelect: result[0].showtime,\n\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n        request.send();\n    }\n\n\n    getParticipants() {\n        var planid = this.state.planid;\n        var params = \"planid=\" + planid;\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var participantsObj = JSON.parse(this.responseText);\n                console.log(participantsObj);\n                that.setState({\n                    participants: participantsObj,\n                    showResult: true,\n                }, ()=> {\n                    that.getUpdatedResult();\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrieveparticipants.php?\" + params, true);\n        request.send();\n\n\n    }\n\n    displayResult() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n        const centralize = {\n            margin: \"auto\",\n            width: \"50%\",\n            textAlign: 'center',\n            paddingTop: \"30px\"\n        };\n\n\n        return (\n            <div>\n                <Jumbotron fluid>\n                    <Container>\n                        <h2>Result for Plan ID: {this.state.planid}</h2>\n                        <ul>\n                        {this.state.participants.map((value, index) => (\n                            <li>{this.displayShowtimeVote(value)}</li>\n                        //    <p>{value.email} has voted for {this.printDate(value.showtimeVoted)} </p> \n                        ))}\n                        </ul>\n                        {/* <p>You have voted for showtime: {this.printDate(this.state.participant.showtimeVoted)}</p> */}\n                        <table> <tr> <th>S/No</th> <th>Show Time</th> <th>Number of votes</th></tr>\n                            {this.state.result_arr.map((value, index) => (\n\n                                <tr> <td>{index + 1}</td><td>{this.printDate(value.showtime)}</td> <td>{value.counter}</td></tr>\n                            ))}\n                        </table>\n\n                        <br></br>\n                        {this.displayTimeslotResult()}\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n\n\n    }\n\n    displayTimeslotResult(){\n\n        this.getParticipants();\n        var timeslotResults = this.state.result_arr;\n        var highestCount = timeslotResults[0].counter;\n        var result = new Array(timeslotResults[0]);\n        for(let i = 1; i <timeslotResults.length; i++){\n            if (timeslotResults[i].counter == highestCount){\n                result.push(timeslotResults[i]);\n            }else if(timeslotResults[i].counter > highestCount){\n                highestCount = timeslotResults[i].counter;\n                result = new Array(timeslotResults[i]);\n            }\n        }\n        \n        console.log(result);\n\n        if(result.length >1){\n            return(\n                <div>\n                <p>Higest timeslots are: </p>\n                <ul>\n                        {result.map((value, index) => (\n                            <li>{this.printDate(value.showtime)}</li>\n                        //    <p>{value.email} has voted for {this.printDate(value.showtimeVoted)} </p> \n                        ))}\n                        </ul>\n                </div>\n            )\n        }else{\n            return(\n                \n                <p>Highest timeslot voted is: {this.printDate(result[0].showtime)}</p>\n            )\n        }\n    }\n\n    displayShowtimeVote(participant){\n        if(participant.email == this.state.email){\n            return \"You have voted for \"+this.printDate(participant.showtimeVoted);\n        }\n\n        return participant.email+\" has voted for \"+ this.printDate(participant.showtimeVoted);\n    }\n\n    displayForm() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n        const centralize = {\n            margin: \"auto\",\n            width: \"50%\",\n            textAlign: 'center',\n            paddingTop: \"30px\"\n        };\n        return (\n            <div>\n\n\n                <Jumbotron fluid>\n\n                    <Container>\n                        <p>Logged in as: {this.state.email}</p>\n                        <Form>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridEmail\">\n                                    <Form.Label>Cinema</Form.Label>\n                                    <Form.Control value={this.state.result_arr[0].cinema} disabled />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridPassword\">\n                                    <Form.Label>Movie</Form.Label>\n                                    <Form.Control value={this.state.result_arr[0].movie} disabled />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridState\">\n                                    <Form.Label>Select Showtime</Form.Label>\n                                    <Form.Control as=\"select\" name=\"showtimeSelect\" onChange={this.handleChange}>\n\n                                        {this.state.result_arr.map((value, index) => (\n\n                                            <option value={value.showtime}>{this.printDate(value.showtime)}</option>\n                                        ))}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n\n                            <div style={centralize}>\n                                <Button variant=\"primary\" type=\"submit\" name=\"vote\" onClick={this.handleSubmitVote}>\n                                    Submit Vote\n                        </Button>\n                            </div>\n\n                        </Form>\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n\n\n\n\n    }\n\n    printDate(stringDate) {\n        var date = new Date(stringDate);\n        // console.log((date.getMonth()+1) + '/' + date.getDate() + '/' +  date.getFullYear())\n\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12; // the hour '0' should be '12'\n        minutes = minutes < 10 ? '0' + minutes : minutes;\n        var strTime = hours + ':' + minutes + ' ' + ampm;\n        stringDate = \"Date: \" + (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear() + \" Time: \" + strTime;\n\n        return stringDate;\n\n    }\n\n    getTotalCounts(){\n\n        var result_arr = this.state.result_arr;\n\n        var totalCount = parseInt(result_arr[0].counter);\n        console.log(totalCount)\n\n        for(let i = 1; i<result_arr.length; i++){\n            totalCount += parseInt(result_arr[i].counter);\n            console.log(totalCount)\n        }\n        console.log(totalCount)\n        \n        return totalCount;\n\n    }\n\n\n    render() {\n        console.log(this.state);\n        console.log(this.state.result_arr.length);\n        if(this.state.result_arr.length>0){\n            console.log(\"hi\");\n            console.log(this.state.result_arr[0].noOfParticipants);\n            console.log(this.getTotalCounts() )\n            if(this.getTotalCounts() == this.state.result_arr[0].noOfParticipants){\n               \n                return (\n                    <div>\n                        {this.displayResult()}\n                    </div>\n                )\n            }\n        }\n\n        if (this.state.showResult) {\n            return (\n                <div>\n                    {this.displayResult()}\n                </div>\n            )\n        }\n\n        if (this.state.showForm) {\n            return (\n                <div>\n                    {this.displayForm()}\n                </div>\n            )\n        }\n\n        return (\n\n\n            <Jumbotron fluid>\n\n                <Container>\n                    <p>Share this link to your friend to invite them to vote as well!</p>\n                    <Form>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\n                                <Form.Label>Enter Email to vote</Form.Label>\n                                <Form.Control name=\"email\" type=\"email\" onChange={this.handleChange} />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\n\n                            </Form.Group>\n\n                        </Form.Row>\n                        <Button variant=\"primary\" type=\"submit\" name=\"email\" onClick={this.handleSubmit}>\n                            Submit\n                        </Button>\n\n                    </Form>\n                </Container>\n            </Jumbotron>\n\n        )\n\n    }\n\n\n\n    getData() {\n\n        const queryString = require('query-string');\n        const parsed = queryString.parse(this.props.location.search);\n        console.log(parsed.id);\n\n        this.setState({\n            planid: parsed.id\n        }, () => {\n            this.getDataFromPhp();\n        });\n\n\n\n\n    }\n\n    getDataFromPhp() {\n        var that = this;\n\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var result = JSON.parse(this.responseText);\n                console.log(result);\n                that.setState({\n                    result_arr: result,\n                    showtimeSelect: result[0].showtime,\n\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n        request.send();\n\n    }\n\n    // getUpdatedParticipantsDataFromPhp(){\n    //     var request = new XMLHttpRequest();\n    //     var that = this;\n    //     request.onreadystatechange = function () {\n    //         if (this.readyState == 4 && this.status == 200) {\n    //             var result = JSON.parse(this.responseText);\n    //             console.log(result);\n    //             that.setState({\n    //                 result_arr: result,\n    //             })\n    //         }\n    //     }\n    //     request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n    //     request.send();\n    // }\n\n}\n\nexport default PlanToMeet;"]},"metadata":{},"sourceType":"module"}