{"ast":null,"code":"var _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/PlanToMeet.js\";\nimport React from 'react';\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap'; // import Button from '@material-ui/core/Button';\n\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\nclass PlanToMeet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      planid: 222222,\n      result_arr: [],\n      email: '',\n      participant: '',\n      showForm: false,\n      cinema: '',\n      movie: '',\n      showtimeSelect: '',\n      showResult: false,\n      resultVote: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSubmitVote = this.handleSubmitVote.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"hey\");\n    var planid = this.state.planid;\n    var email = encodeURI(this.state.email);\n    var params = \"planid=\" + planid + \"&email=\" + email;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var participantObj = JSON.parse(this.responseText);\n        console.log(participantObj);\n        that.setState({\n          participant: participantObj,\n          showForm: true\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/addparticipant.php?\" + params, true);\n    request.send();\n  }\n\n  handleSubmitVote(event) {\n    event.preventDefault();\n    console.log(\"hey2\");\n    var planid = this.state.planid;\n    var email = encodeURI(this.state.email);\n    var selectedShowtime = encodeURI(this.state.showtimeSelect);\n    console.log(selectedShowtime);\n    var params = \"planid=\" + planid + \"&email=\" + email + \"&selectedShowtime=\" + selectedShowtime;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var voteObj = JSON.parse(this.responseText);\n        console.log(voteObj);\n        that.setState({\n          participant: voteObj,\n          showResult: true\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/submitvote.php?\" + params, true);\n    request.send();\n  }\n\n  displayResult() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n    const centralize = {\n      margin: \"auto\",\n      width: \"50%\",\n      textAlign: 'center',\n      paddingTop: \"30px\"\n    };\n    var request = new XMLHttpRequest();\n    var that = this;\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var result = JSON.parse(this.responseText);\n        console.log(result);\n        that.setState({\n          result_arr: result\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n    request.send();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Result for: \", this.state.planid), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"You have voted for: \", this.printDate(this.state.participant.showtimeVoted)), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \" \", React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \" \", React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Showtime\"), \" \", React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"VoteCount\")), this.state.result_arr.map((value, index) => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \" \", React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.printDate(value.showtime))))))));\n  }\n\n  displayForm() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n    const centralize = {\n      margin: \"auto\",\n      width: \"50%\",\n      textAlign: 'center',\n      paddingTop: \"30px\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Logged in as: \", this.state.email), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Cinema\"), React.createElement(Form.Control, {\n      value: this.state.result_arr[0].cinema,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Movie\"), React.createElement(Form.Control, {\n      value: this.state.result_arr[0].movie,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }))), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridState\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Select Showtime\"), React.createElement(Form.Control, {\n      as: \"select\",\n      name: \"showtimeSelect\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.state.result_arr.map((value, index) => React.createElement(\"option\", {\n      value: value.showtime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.printDate(value.showtime)))))), React.createElement(\"div\", {\n      style: centralize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      name: \"vote\",\n      onClick: this.handleSubmitVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Submit Vote\"))))));\n  }\n\n  printDate(stringDate) {\n    var date = new Date(stringDate); // console.log((date.getMonth()+1) + '/' + date.getDate() + '/' +  date.getFullYear())\n\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    stringDate = \"Date: \" + (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear() + \" Time: \" + strTime;\n    return stringDate;\n  }\n\n  render() {\n    console.log(this.state);\n\n    if (this.state.showResult) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, this.displayResult());\n    }\n\n    if (this.state.showForm) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, this.displayForm());\n    }\n\n    return React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Share this link to your friend to invite them to vote as well!\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Enter Email to vote\"), React.createElement(Form.Control, {\n      name: \"email\",\n      type: \"email\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      name: \"email\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n  getData() {\n    const queryString = require('query-string');\n\n    const parsed = queryString.parse(this.props.location.search);\n    console.log(parsed.id);\n    this.setState({\n      planid: parsed.id\n    }, () => {\n      this.getDataFromPhp();\n    });\n  }\n\n  getDataFromPhp() {\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var result = JSON.parse(this.responseText);\n        console.log(result);\n        that.setState({\n          result_arr: result,\n          showtimeSelect: result[0].showtime\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n    request.send();\n  }\n\n}\n\nexport default PlanToMeet;","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/PlanToMeet.js"],"names":["React","Table","Jumbotron","Container","Row","Col","Button","Form","MDBCardImage","Redirect","PlanToMeet","Component","constructor","props","state","planid","result_arr","email","participant","showForm","cinema","movie","showtimeSelect","showResult","resultVote","handleChange","bind","handleSubmit","handleSubmitVote","componentDidMount","getData","event","target","name","value","setState","preventDefault","console","log","encodeURI","params","that","request","XMLHttpRequest","onreadystatechange","readyState","status","participantObj","JSON","parse","responseText","open","send","selectedShowtime","voteObj","displayResult","bold","fontWeight","center","textAlign","centralize","margin","width","paddingTop","result","printDate","showtimeVoted","map","index","showtime","displayForm","stringDate","date","Date","hours","getHours","minutes","getMinutes","ampm","strTime","getMonth","getDate","getFullYear","render","queryString","require","parsed","location","search","id","getDataFromPhp"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap';\n// import Button from '@material-ui/core/Button';\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\n\nclass PlanToMeet extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            planid: 222222,\n            result_arr: [],\n            email: '',\n            participant: '',\n            showForm: false,\n            cinema: '',\n            movie: '',\n            showtimeSelect: '',\n            showResult: false,\n            resultVote: [],\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleSubmitVote = this.handleSubmitVote.bind(this);\n    }\n\n    componentDidMount() {\n        this.getData();\n\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n\n\n        this.setState({\n            [name]: value,\n        });\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(\"hey\");\n        var planid = this.state.planid;\n        var email = encodeURI(this.state.email);\n        var params = \"planid=\" + planid + \"&email=\" + email;\n\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var participantObj = JSON.parse(this.responseText);\n                console.log(participantObj);\n                that.setState({\n                    participant: participantObj,\n                    showForm: true,\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/addparticipant.php?\" + params, true);\n        request.send();\n\n    }\n\n    handleSubmitVote(event) {\n        event.preventDefault();\n        console.log(\"hey2\")\n        var planid = this.state.planid;\n        var email = encodeURI(this.state.email);\n        var selectedShowtime = encodeURI(this.state.showtimeSelect);\n        console.log(selectedShowtime);\n        var params = \"planid=\" + planid + \"&email=\" + email + \"&selectedShowtime=\" + selectedShowtime;\n\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var voteObj = JSON.parse(this.responseText);\n                console.log(voteObj);\n                that.setState({\n                    participant: voteObj,\n                    showResult: true,\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/submitvote.php?\" + params, true);\n        request.send();\n\n       \n\n    }\n\n    displayResult() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n        const centralize = {\n            margin: \"auto\",\n            width: \"50%\",\n            textAlign: 'center',\n            paddingTop: \"30px\"\n        };\n        \n         var request = new XMLHttpRequest();\n        var that = this;\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var result = JSON.parse(this.responseText);\n                console.log(result);\n                that.setState({\n                    result_arr: result,\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n        request.send();\n\n        return (\n            <div>\n\n\n                <Jumbotron fluid>\n\n                    <Container>\n                        <h2>Result for: {this.state.planid}</h2>\n                        <p>You have voted for: {this.printDate(this.state.participant.showtimeVoted)}</p>\n                        <table> <tr> <th>Showtime</th> <th>VoteCount</th></tr>\n                        {this.state.result_arr.map((value, index) => (\n\n                            <tr> <td>{index+1}</td><td>{this.printDate(value.showtime)}</td></tr>\n                        ))}\n                        </table>\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n\n\n\n\n    }\n\n    displayForm() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n        const centralize = {\n            margin: \"auto\",\n            width: \"50%\",\n            textAlign: 'center',\n            paddingTop: \"30px\"\n        };\n        return (\n            <div>\n\n\n                <Jumbotron fluid>\n\n                    <Container>\n                        <p>Logged in as: {this.state.email}</p>\n                        <Form>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridEmail\">\n                                    <Form.Label>Cinema</Form.Label>\n                                    <Form.Control value={this.state.result_arr[0].cinema} disabled />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridPassword\">\n                                    <Form.Label>Movie</Form.Label>\n                                    <Form.Control value={this.state.result_arr[0].movie} disabled />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridState\">\n                                    <Form.Label>Select Showtime</Form.Label>\n                                    <Form.Control as=\"select\" name=\"showtimeSelect\" onChange={this.handleChange}>\n\n                                        {this.state.result_arr.map((value, index) => (\n\n                                            <option value={value.showtime}>{this.printDate(value.showtime)}</option>\n                                        ))}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n\n                            <div style={centralize}>\n                                <Button variant=\"primary\" type=\"submit\" name=\"vote\" onClick={this.handleSubmitVote}>\n                                    Submit Vote\n                        </Button>\n                            </div>\n\n                        </Form>\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n\n\n\n\n    }\n\n    printDate(stringDate) {\n        var date = new Date(stringDate);\n        // console.log((date.getMonth()+1) + '/' + date.getDate() + '/' +  date.getFullYear())\n\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12; // the hour '0' should be '12'\n        minutes = minutes < 10 ? '0' + minutes : minutes;\n        var strTime = hours + ':' + minutes + ' ' + ampm;\n        stringDate = \"Date: \" + (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear() + \" Time: \" + strTime;\n\n        return stringDate;\n\n    }\n\n\n    render() {\n\n        console.log(this.state);\n\n        if (this.state.showResult) {\n            return (\n                <div>\n                    {this.displayResult()}\n                </div>\n            )\n        }\n\n        if (this.state.showForm) {\n            return (\n                <div>\n                    {this.displayForm()}\n                </div>\n            )\n        }\n\n        return (\n\n\n            <Jumbotron fluid>\n\n                <Container>\n                    <p>Share this link to your friend to invite them to vote as well!</p>\n                    <Form>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\n                                <Form.Label>Enter Email to vote</Form.Label>\n                                <Form.Control name=\"email\" type=\"email\" onChange={this.handleChange} />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\n\n                            </Form.Group>\n\n                        </Form.Row>\n                        <Button variant=\"primary\" type=\"submit\" name=\"email\" onClick={this.handleSubmit}>\n                            Submit\n                        </Button>\n\n                    </Form>\n                </Container>\n            </Jumbotron>\n\n        )\n\n    }\n\n\n\n    getData() {\n\n        const queryString = require('query-string');\n        const parsed = queryString.parse(this.props.location.search);\n        console.log(parsed.id);\n\n        this.setState({\n            planid: parsed.id\n        }, () => {\n            this.getDataFromPhp();\n        });\n\n\n\n\n    }\n\n    getDataFromPhp() {\n        var that = this;\n\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var result = JSON.parse(this.responseText);\n                console.log(result);\n                that.setState({\n                    result_arr: result,\n                    showtimeSelect: result[0].showtime,\n\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n        request.send();\n\n    }\n\n}\n\nexport default PlanToMeet;"]},"metadata":{},"sourceType":"module"}