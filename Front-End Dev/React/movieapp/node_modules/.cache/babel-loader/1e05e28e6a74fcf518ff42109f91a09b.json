{"ast":null,"code":"var _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/FormPlan.js\";\nimport React from 'react';\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap'; // import Button from '@material-ui/core/Button';\n\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\nclass FormPlan extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cinema: this.props.location.state.cinema,\n      movie_id: this.props.location.state.movie_id,\n      result: [],\n      cinema_id: '',\n      city_id: '',\n      apikeyIS: '7UiR6NYdJicQiXms2GOxJSqBddHXuivw',\n      apikeyOMDB: '9e790f8b',\n      imdbid: '',\n      title: '',\n      dateFrom: '',\n      dateTo: '',\n      redirect: false,\n      planid: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var showtimes = this.state.result;\n    var dateFrom = this.state.dateFrom;\n    var dateTo = this.state.dateTo;\n    var cinema = this.state.cinema;\n    cinema = cinema.trim().replace(/ /g, '%20');\n    var movieTitle = this.state.title;\n    movieTitle = movieTitle.trim().replace(/ /g, '%20');\n    console.log(cinema);\n    console.log(movieTitle);\n    var params = \"cinema=\" + cinema + \"&movieTitle=\" + movieTitle;\n    var resultShowtimes = this.generateShowtimes(dateFrom, dateTo, showtimes);\n\n    if (resultShowtimes.length == 0) {\n      document.getElementById(\"error\").innerHTML = \"There are no showtimes during this period! Please re-enter dates.\";\n    } else {\n      console.log(resultShowtimes);\n\n      for (let i = 0; i < resultShowtimes.length; i++) {\n        params += \"&showtimes[]=\" + encodeURI(resultShowtimes[i]);\n      }\n\n      console.log(params);\n      var that = this;\n      var request = new XMLHttpRequest();\n\n      request.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          console.log(\"yo\");\n          var id = this.responseText;\n          console.log(id);\n          that.setState({\n            redirect: true,\n            planid: id\n          });\n        }\n      };\n\n      request.open(\"GET\", \"http://localhost/Project/add.php?\" + params, true);\n      request.send();\n    }\n  }\n\n  generateShowtimes(dateFrom, dateTo, showtimes) {\n    var from = new Date(dateFrom);\n    var to = new Date(dateTo);\n    var result = []; // console.log(from)\n    // console.log(to)\n    // console.log(showtimes)\n\n    for (let i = 0; i < showtimes.length; i++) {\n      var showtime = showtimes[i].start_at;\n      showtime = new Date(showtime);\n\n      if (showtime.getDate() <= to.getDate() && showtime.getDate() >= from.getDate()) {\n        // console.log(\"in between: \"+showtime)\n        result.push(showtimes[i].start_at);\n      }\n    }\n\n    return result;\n  } // displayDetail() {\n  //     const bold = {\n  //         fontWeight: 'bold',\n  //     };\n  //     const center = {\n  //         textAlign: 'center',\n  //     };\n  //     if (this.state.title) {\n  //         return (\n  //             <Jumbotron fluid>\n  //                 <Container>\n  //                     <Row>\n  //                         <Col>\n  //                             <MDBCardImage\n  //                                 className=\"img-fluid pb-3 float-left\"\n  //                                 src={this.state.movie_details.Poster}\n  //                             />\n  //                         </Col>\n  //                         <Col xs={7}>\n  //                             <h1>{this.state.movie_details.Title}</h1>\n  //                             <p><span style={bold}>Release date:</span>  {this.state.movie_details.Released}  </p>\n  //                             <p> <span style={bold}>IMDB Rating:</span>  {this.state.movie_details.imdbRating} </p>\n  //                             <p> <span style={bold}>Runtime:</span>  {this.state.movie_details.Runtime} </p>\n  //                             <p> <span style={bold}>Rated:</span>  {this.state.movie_details.Rated} </p>\n  //                             <p> <span style={bold}>Genre:</span>  {this.state.movie_details.Genre} </p>\n  //                             <p> <span style={bold}>Director:</span>  {this.state.movie_details.Director} </p>\n  //                             <p> <span style={bold}>Production:</span>  {this.state.movie_details.Production} </p>\n  //                             <p> <span style={bold}>Language:</span>  {this.state.movie_details.Language} </p>\n  //                             <p><span style={bold}>Plot:</span> {this.state.movie_details.Plot}</p>\n  //                         </Col>\n  //                     </Row>\n  //                     <div className=\"table1\">\n  //                         <h3>{this.state.movie_details.Title} showtimes at {this.state.cinema} </h3>\n  //                         <br></br>\n  //                         <Table striped bordered hover variant=\"dark\"  >\n  //                             <thead>\n  //                                 <tr>\n  //                                     <th>#</th>\n  //                                     <th>Timeslot</th>\n  //                                 </tr>\n  //                             </thead>\n  //                             <tbody>\n  //                                 {this.state.result.map((value, index) => (\n  //                                     <tr>\n  //                                         <td>\n  //                                             {index + 1}\n  //                                         </td>\n  //                                         <td colSpan=\"2\">{this.printDate(value.start_at)}</td>\n  //                                         <td style={center}><Button variant=\"outline-light\" value={value.booking_link} onClick={this.handleChange}>Book Now</Button></td>\n  //                                     </tr>\n  //                                 ))}\n  //                             </tbody>\n  //                         </Table>\n  //                     </div>\n  //                 </Container>\n  //             </Jumbotron>\n  //         )\n  //     }\n  // }\n\n\n  getMinDate() {\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1; //January is 0!\n\n    var yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = '0' + dd;\n    }\n\n    if (mm < 10) {\n      mm = '0' + mm;\n    }\n\n    today = yyyy + '-' + mm + '-' + dd;\n    return today;\n  }\n\n  redirect() {\n    if (this.state.redirect) {\n      console.log(\"ok\"); // window.location.href = \"http://localhost:3000/plantomeet?id=\" +this.state.planid;\n\n      return React.createElement(Redirect, {\n        push: true,\n        from: \"/\",\n        to: {\n          pathname: '/successfulform',\n          state: {\n            planid: this.state.planid\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    const centralize = {\n      margin: \"auto\",\n      width: \"50%\",\n      textAlign: 'center',\n      paddingTop: \"30px\"\n    };\n    console.log(this.state); // {this.redirect()}\n\n    if (this.state.redirect) {\n      console.log(\"ok\"); // window.location.href = \"localhost:300/plantomeet?id=\" +this.state.planid;\n\n      return React.createElement(Redirect, {\n        push: true,\n        from: \"/\",\n        to: {\n          pathname: '/successfulform',\n          state: {\n            planid: this.state.planid\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Jumbotron, {\n      fluid: true,\n      style: {\n        marginTop: \"50px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      style: {\n        textAlign: 'center',\n        paddingBottom: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Plan Form\"), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Cinema\"), React.createElement(Form.Control, {\n      value: this.state.cinema,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"Movie\"), React.createElement(Form.Control, {\n      value: this.state.title,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }))), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"dateFrom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Period you're planning to watch: From\"), React.createElement(Form.Control, {\n      type: \"date\",\n      placeholder: \"dd/mm/yyyy\",\n      name: \"dateFrom\",\n      min: this.getMinDate(),\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"error\",\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"dateTo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, \"To\"), React.createElement(Form.Control, {\n      type: \"date\",\n      placeholder: \"dd/mm/yyyy\",\n      min: this.getMinDate(),\n      name: \"dateTo\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      style: centralize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"danger\",\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Generate Link\")))));\n  }\n\n  getData() {\n    var cinema_name = this.state.cinema;\n    var movie_id = this.state.movie_id; //incase api is down uncomment below (must choose terminator and amk hub)\n\n    var data = require('./backupjson/getallcinemas.json');\n\n    var city_id = this.state.city_id;\n\n    var data = require('./backupjson/formplanshowtimeterminatoramk.json');\n\n    var result_arr = [];\n    var cinema_id = \"66156\";\n\n    for (let i = 0; i < data.showtimes.length; i++) {\n      var showtime = data.showtimes[i]; // console.log(showtime);\n\n      var showtimeDateFormat = new Date(showtime);\n      var dateNow = Date.now();\n\n      if (showtime.cinema_id == cinema_id && showtime.movie_id == movie_id) {\n        result_arr.push(showtime);\n      }\n    }\n\n    console.log(result_arr);\n    this.setState({\n      result: result_arr\n    });\n\n    var data = require('./backupjson/formplanterminatordetails.json');\n\n    this.setState({\n      imdbid: data.movie.imdb_id,\n      title: data.movie.title\n    }); //api method \n\n    var xhr = new XMLHttpRequest();\n    let urlCinemas = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + this.state.apikeyIS;\n    xhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      var resp = JSON.parse(xhr.responseText);\n\n      for (let i = 0; i < resp.cinemas.length; i++) {\n        var cinema = resp.cinemas[i];\n\n        if (cinema_name.toLowerCase() == cinema.name.toLowerCase()) {\n          this.setState({\n            cinema_id: cinema.id,\n            city_id: cinema.city_id\n          });\n        }\n      }\n\n      console.log(this.state);\n      var xhr2 = new XMLHttpRequest();\n      var city_id = this.state.city_id;\n      console.log(city_id);\n      console.log(movie_id); //get showtimes\n\n      let urlShowtimes = \"https://api.internationalshowtimes.com/v4/showtimes?city_ids=\" + city_id + \"&movie_id=\" + movie_id + \"&apikey=\" + this.state.apikeyIS;\n      xhr2.addEventListener('load', () => {\n        // update the state of the component with the result here\n        var result_arr = [];\n        var resp = JSON.parse(xhr2.responseText);\n        console.log(this.state.cinema_id);\n        console.log(movie_id);\n\n        for (let i = 0; i < resp.showtimes.length; i++) {\n          var showtime = resp.showtimes[i]; // console.log(showtime);\n\n          var showtimeDateFormat = new Date(showtime);\n          var dateNow = Date.now();\n\n          if (showtime.cinema_id == this.state.cinema_id && showtime.movie_id == movie_id) {\n            result_arr.push(showtime);\n          }\n        }\n\n        console.log(result_arr);\n        this.setState({\n          result: result_arr\n        });\n      });\n      xhr2.open('GET', urlShowtimes);\n      xhr2.send();\n      console.log(this.state);\n    });\n    xhr.open('GET', urlCinemas);\n    xhr.send(); // get movie details\n\n    var xhr3 = new XMLHttpRequest();\n    let urlmoviedetails = \"https://api.internationalshowtimes.com/v4/movies/\" + movie_id + \"?fields=imdb_id,title,&apikey=\" + this.state.apikeyIS;\n    xhr3.addEventListener('load', () => {\n      // update the state of the component with the result here\n      var resp = JSON.parse(xhr3.responseText);\n      this.setState({\n        imdbid: resp.movie.imdb_id,\n        title: resp.movie.title\n      });\n      console.log(this.state.imdbid); //     var xhr4 = new XMLHttpRequest()\n      //     //get movie details from imdb\n      //     let urlMovieDetails = \"http://www.omdbapi.com/?i=\" + this.state.imdbid + \"&apikey=\" + this.state.apikeyOMDB;\n      //     xhr4.addEventListener('load', () => {\n      //         // update the state of the component with the result here\n      //         var resp = JSON.parse(xhr4.responseText);\n      //         this.setState({\n      //             movie_details: resp,\n      //         });\n      //         console.log(this.state);\n      //     })\n      //     xhr4.open('GET', urlMovieDetails)\n      //     xhr4.send()\n    });\n    xhr3.open('GET', urlmoviedetails);\n    xhr3.send();\n  }\n\n  displayShowtimes() {\n    // this.getData();\n    let r = this.state.result;\n    var test = '';\n    var result = \"<table> <tr> <th>S/No</th> <th>Time</th></tr>\";\n    console.log(r);\n\n    for (let i = 0; i < r.length; i++) {\n      result += \"<tr><td>\" + (i + 1) + \"</td><td>\" + r[i].start_at + \"</td></tr>\";\n      test += i + 1 + \" \" + r[i].start_at + \" \";\n    }\n\n    result += \"</table>\"; // return \"<div id  = 'showtime' dangerouslySetInnerHTML={{__html:\"+result+'}}></div>'\n\n    return result; // this.document.getElementById(\"showtime\").innerHTML = result;\n  }\n\n}\n\nexport default FormPlan;","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/FormPlan.js"],"names":["React","Table","Jumbotron","Container","Row","Col","Button","Form","MDBCardImage","Redirect","FormPlan","Component","constructor","props","state","cinema","location","movie_id","result","cinema_id","city_id","apikeyIS","apikeyOMDB","imdbid","title","dateFrom","dateTo","redirect","planid","handleChange","bind","handleSubmit","componentDidMount","getData","event","target","name","value","setState","preventDefault","showtimes","trim","replace","movieTitle","console","log","params","resultShowtimes","generateShowtimes","length","document","getElementById","innerHTML","i","encodeURI","that","request","XMLHttpRequest","onreadystatechange","readyState","status","id","responseText","open","send","from","Date","to","showtime","start_at","getDate","push","getMinDate","today","dd","mm","getMonth","yyyy","getFullYear","pathname","render","centralize","margin","width","textAlign","paddingTop","marginTop","paddingBottom","color","cinema_name","data","require","result_arr","showtimeDateFormat","dateNow","now","movie","imdb_id","xhr","urlCinemas","addEventListener","resp","JSON","parse","cinemas","toLowerCase","xhr2","urlShowtimes","xhr3","urlmoviedetails","displayShowtimes","r","test"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap';\n// import Button from '@material-ui/core/Button';\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\n\nclass FormPlan extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cinema: this.props.location.state.cinema,\n            movie_id: this.props.location.state.movie_id,\n            result: [],\n            cinema_id: '',\n            city_id: '',\n            apikeyIS: '7UiR6NYdJicQiXms2GOxJSqBddHXuivw',\n            apikeyOMDB: '9e790f8b',\n            imdbid: '',\n            title: '',\n            dateFrom: '',\n            dateTo: '',\n            redirect: false,\n            planid: '',\n\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.getData();\n\n    }\n\n    handleChange(event) {\n\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n\n\n        this.setState({\n            [name]: value,\n        });\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        var showtimes = this.state.result;\n        var dateFrom = this.state.dateFrom;\n        var dateTo = this.state.dateTo;\n        var cinema = this.state.cinema;\n        cinema = cinema.trim().replace(/ /g, '%20');\n        var movieTitle = this.state.title;\n        movieTitle = movieTitle.trim().replace(/ /g, '%20');\n\n        console.log(cinema);\n        console.log(movieTitle);\n\n\n        var params = \"cinema=\" + cinema + \"&movieTitle=\" + movieTitle\n\n        var resultShowtimes = this.generateShowtimes(dateFrom, dateTo, showtimes);\n\n        if (resultShowtimes.length == 0) {\n            document.getElementById(\"error\").innerHTML = \"There are no showtimes during this period! Please re-enter dates.\";\n        } else {\n\n            console.log(resultShowtimes)\n\n            for (let i = 0; i < resultShowtimes.length; i++) {\n                params += \"&showtimes[]=\" + encodeURI(resultShowtimes[i]);\n            }\n\n            console.log(params);\n\n\n            var that = this;\n            var request = new XMLHttpRequest();\n\n            request.onreadystatechange = function () {\n                if (this.readyState == 4 && this.status == 200) {\n                    console.log(\"yo\")\n                    var id = this.responseText;\n                    console.log(id);\n                    that.setState({\n                        redirect: true,\n                        planid: id,\n                    })\n                }\n            }\n            request.open(\"GET\", \"http://localhost/Project/add.php?\" + params, true);\n            request.send();\n\n        }\n\n\n\n    }\n\n\n    generateShowtimes(dateFrom, dateTo, showtimes) {\n\n\n        var from = new Date(dateFrom);\n        var to = new Date(dateTo);\n\n        var result = []\n\n        // console.log(from)\n        // console.log(to)\n        // console.log(showtimes)\n\n        for (let i = 0; i < showtimes.length; i++) {\n            var showtime = showtimes[i].start_at;\n            showtime = new Date(showtime)\n            if ((showtime.getDate() <= to.getDate() && showtime.getDate() >= from.getDate())) {\n                // console.log(\"in between: \"+showtime)\n                result.push(showtimes[i].start_at)\n            }\n\n        }\n\n        return result;\n\n    }\n\n    // displayDetail() {\n    //     const bold = {\n    //         fontWeight: 'bold',\n    //     };\n\n    //     const center = {\n    //         textAlign: 'center',\n    //     };\n\n\n\n    //     if (this.state.title) {\n\n\n    //         return (\n\n\n    //             <Jumbotron fluid>\n\n    //                 <Container>\n    //                     <Row>\n    //                         <Col>\n\n\n    //                             <MDBCardImage\n    //                                 className=\"img-fluid pb-3 float-left\"\n    //                                 src={this.state.movie_details.Poster}\n    //                             />\n\n    //                         </Col>\n    //                         <Col xs={7}>\n\n    //                             <h1>{this.state.movie_details.Title}</h1>\n\n    //                             <p><span style={bold}>Release date:</span>  {this.state.movie_details.Released}  </p>\n    //                             <p> <span style={bold}>IMDB Rating:</span>  {this.state.movie_details.imdbRating} </p>\n    //                             <p> <span style={bold}>Runtime:</span>  {this.state.movie_details.Runtime} </p>\n    //                             <p> <span style={bold}>Rated:</span>  {this.state.movie_details.Rated} </p>\n    //                             <p> <span style={bold}>Genre:</span>  {this.state.movie_details.Genre} </p>\n    //                             <p> <span style={bold}>Director:</span>  {this.state.movie_details.Director} </p>\n    //                             <p> <span style={bold}>Production:</span>  {this.state.movie_details.Production} </p>\n    //                             <p> <span style={bold}>Language:</span>  {this.state.movie_details.Language} </p>\n\n    //                             <p><span style={bold}>Plot:</span> {this.state.movie_details.Plot}</p>\n\n\n    //                         </Col>\n\n\n    //                     </Row>\n    //                     <div className=\"table1\">\n    //                         <h3>{this.state.movie_details.Title} showtimes at {this.state.cinema} </h3>\n    //                         <br></br>\n\n    //                         <Table striped bordered hover variant=\"dark\"  >\n    //                             <thead>\n    //                                 <tr>\n    //                                     <th>#</th>\n    //                                     <th>Timeslot</th>\n    //                                 </tr>\n    //                             </thead>\n    //                             <tbody>\n    //                                 {this.state.result.map((value, index) => (\n    //                                     <tr>\n    //                                         <td>\n    //                                             {index + 1}\n    //                                         </td>\n    //                                         <td colSpan=\"2\">{this.printDate(value.start_at)}</td>\n    //                                         <td style={center}><Button variant=\"outline-light\" value={value.booking_link} onClick={this.handleChange}>Book Now</Button></td>\n    //                                     </tr>\n    //                                 ))}\n\n    //                             </tbody>\n    //                         </Table>\n    //                     </div>\n\n\n    //                 </Container>\n    //             </Jumbotron>\n\n\n    //         )\n    //     }\n\n\n    // }\n\n    getMinDate() {\n        var today = new Date();\n        var dd = today.getDate();\n        var mm = today.getMonth() + 1; //January is 0!\n        var yyyy = today.getFullYear();\n        if (dd < 10) {\n            dd = '0' + dd\n        }\n        if (mm < 10) {\n            mm = '0' + mm\n        }\n\n        today = yyyy + '-' + mm + '-' + dd;\n\n        return today;\n    }\n    redirect() {\n\n\n        if (this.state.redirect) {\n            console.log(\"ok\")\n            // window.location.href = \"http://localhost:3000/plantomeet?id=\" +this.state.planid;\n            return (\n                <Redirect push from='/' to={{\n                    pathname: '/successfulform',\n                    state: {\n                        planid: this.state.planid,\n                    }\n                }} />)\n\n        }\n\n    }\n\n    render() {\n        const centralize = {\n            margin: \"auto\",\n            width: \"50%\",\n            textAlign: 'center',\n            paddingTop: \"30px\"\n\n        };\n\n        console.log(this.state);\n\n        // {this.redirect()}\n\n        if (this.state.redirect) {\n            console.log(\"ok\")\n\n            // window.location.href = \"localhost:300/plantomeet?id=\" +this.state.planid;\n\n            return (<Redirect push from='/' to={{\n                pathname: '/successfulform',\n                state: {\n                    planid: this.state.planid,\n                }\n            }} />)\n\n        }\n        return (\n\n            <Jumbotron fluid style={{ marginTop: \"50px\" }}>\n                <Container>\n                    <Form>\n                        <h2 style={{ textAlign: 'center', paddingBottom: \"20px\" }}>Plan Form</h2>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\n                                <Form.Label>Cinema</Form.Label>\n                                <Form.Control value={this.state.cinema} disabled />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\n                                <Form.Label>Movie</Form.Label>\n                                <Form.Control value={this.state.title} disabled />\n                            </Form.Group>\n                        </Form.Row>\n                        {/* <Form.Label>Enter period you're planning to watch</Form.Label> */}\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"dateFrom\">\n                                <Form.Label>Period you're planning to watch: From</Form.Label>\n                                <Form.Control type=\"date\" placeholder=\"dd/mm/yyyy\" name=\"dateFrom\" min={this.getMinDate()} onChange={this.handleChange} />\n                                <span id=\"error\" style={{ color: \"red\" }}></span>\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"dateTo\">\n                                <Form.Label>To</Form.Label>\n                                <Form.Control type=\"date\" placeholder=\"dd/mm/yyyy\" min={this.getMinDate()} name=\"dateTo\" onChange={this.handleChange} />\n                            </Form.Group>\n                        </Form.Row>\n\n\n                        <div style={centralize}>\n                            <Button variant=\"danger\" type=\"submit\" onClick={this.handleSubmit}>\n                                Generate Link\n                        </Button>\n                        </div>\n                    </Form>\n                </Container>\n            </Jumbotron>\n\n\n\n        )\n\n    }\n\n\n\n    getData() {\n\n\n        var cinema_name = this.state.cinema;\n        var movie_id = this.state.movie_id;\n\n        //incase api is down uncomment below (must choose terminator and amk hub)\n\n        var data = require('./backupjson/getallcinemas.json');\n\n        var city_id = this.state.city_id;\n        var data = require('./backupjson/formplanshowtimeterminatoramk.json');\n        var result_arr = [];\n\n        var cinema_id = \"66156\";\n        \n\n        for (let i = 0; i < data.showtimes.length; i++) {\n            var showtime = data.showtimes[i];\n            // console.log(showtime);\n            var showtimeDateFormat = new Date(showtime);\n            var dateNow = Date.now();\n\n\n            if (showtime.cinema_id == cinema_id && showtime.movie_id == movie_id) {\n                result_arr.push(showtime);\n            }\n\n        }\n\n        console.log(result_arr);\n\n        this.setState({\n            result: result_arr,\n        });\n\n        var data = require('./backupjson/formplanterminatordetails.json');\n\n        this.setState({\n            imdbid: data.movie.imdb_id,\n            title: data.movie.title,\n\n        });\n\n\n\n\n        //api method \n\n        var xhr = new XMLHttpRequest()\n        let urlCinemas = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + this.state.apikeyIS;\n        xhr.addEventListener('load', () => {\n            // update the state of the component with the result here\n            var resp = JSON.parse(xhr.responseText);\n            for (let i = 0; i < resp.cinemas.length; i++) {\n                var cinema = resp.cinemas[i];\n                if (cinema_name.toLowerCase() == cinema.name.toLowerCase()) {\n                    this.setState({\n                        cinema_id: cinema.id,\n                        city_id: cinema.city_id,\n                    });\n                }\n\n            }\n\n            console.log(this.state);\n\n            var xhr2 = new XMLHttpRequest()\n            var city_id = this.state.city_id;\n\n\n            console.log(city_id)\n            console.log(movie_id)\n\n            //get showtimes\n            let urlShowtimes = \"https://api.internationalshowtimes.com/v4/showtimes?city_ids=\" + city_id + \"&movie_id=\" + movie_id + \"&apikey=\" + this.state.apikeyIS;\n            xhr2.addEventListener('load', () => {\n                // update the state of the component with the result here\n                var result_arr = [];\n                var resp = JSON.parse(xhr2.responseText);\n                console.log(this.state.cinema_id)\n                console.log(movie_id)\n                for (let i = 0; i < resp.showtimes.length; i++) {\n                    var showtime = resp.showtimes[i];\n                    // console.log(showtime);\n                    var showtimeDateFormat = new Date(showtime);\n                    var dateNow = Date.now();\n\n\n                    if (showtime.cinema_id == this.state.cinema_id && showtime.movie_id == movie_id) {\n                        result_arr.push(showtime);\n                    }\n\n                }\n\n                console.log(result_arr);\n\n                this.setState({\n                    result: result_arr,\n                });\n\n            })\n            xhr2.open('GET', urlShowtimes)\n            xhr2.send()\n\n            console.log(this.state);\n\n\n\n        })\n        xhr.open('GET', urlCinemas)\n        xhr.send()\n\n\n\n\n\n        // get movie details\n        var xhr3 = new XMLHttpRequest();\n        let urlmoviedetails = \"https://api.internationalshowtimes.com/v4/movies/\" + movie_id + \"?fields=imdb_id,title,&apikey=\" + this.state.apikeyIS;\n\n        xhr3.addEventListener('load', () => {\n            // update the state of the component with the result here\n            var resp = JSON.parse(xhr3.responseText);\n            this.setState({\n                imdbid: resp.movie.imdb_id,\n                title: resp.movie.title,\n\n            });\n\n            console.log(this.state.imdbid);\n\n            //     var xhr4 = new XMLHttpRequest()\n\n            //     //get movie details from imdb\n            //     let urlMovieDetails = \"http://www.omdbapi.com/?i=\" + this.state.imdbid + \"&apikey=\" + this.state.apikeyOMDB;\n            //     xhr4.addEventListener('load', () => {\n            //         // update the state of the component with the result here\n\n\n            //         var resp = JSON.parse(xhr4.responseText);\n            //         this.setState({\n            //             movie_details: resp,\n            //         });\n\n            //         console.log(this.state);\n            //     })\n            //     xhr4.open('GET', urlMovieDetails)\n            //     xhr4.send()\n\n        })\n        xhr3.open('GET', urlmoviedetails)\n        xhr3.send()\n\n    }\n\n    displayShowtimes() {\n\n        // this.getData();\n        let r = this.state.result;\n        var test = '';\n        var result = \"<table> <tr> <th>S/No</th> <th>Time</th></tr>\";\n        console.log(r);\n        for (let i = 0; i < r.length; i++) {\n            result += \"<tr><td>\" + (i + 1) + \"</td><td>\" + r[i].start_at + \"</td></tr>\";\n            test += (i + 1) + \" \" + r[i].start_at + \" \";\n        }\n        result += \"</table>\";\n\n        // return \"<div id  = 'showtime' dangerouslySetInnerHTML={{__html:\"+result+'}}></div>'\n\n        return result;\n\n        // this.document.getElementById(\"showtime\").innerHTML = result;\n    }\n}\n\nexport default FormPlan;"]},"metadata":{},"sourceType":"module"}