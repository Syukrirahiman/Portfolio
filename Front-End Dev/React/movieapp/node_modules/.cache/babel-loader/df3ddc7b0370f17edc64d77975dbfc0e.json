{"ast":null,"code":"import _defineProperty from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/Plan.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { Table, Jumbotron, Container, Row, Col } from 'react-bootstrap';\nconst suggestions = [];\nconst movieList = [];\nconst apikey = \"7UiR6NYdJicQiXms2GOxJSqBddHXuivw\";\n\nfunction setMovieArr(input) {\n  var result_id = '';\n  movieList.length = 0;\n\n  for (let i = 0; i < suggestions.length; i++) {\n    var cinema = suggestions[i];\n\n    if (cinema.label.toLowerCase() == input.toLowerCase()) {\n      result_id = cinema.id;\n    }\n  }\n\n  if (result_id != '') {\n    var xhr = new XMLHttpRequest();\n    let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=\" + apikey;\n    xhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      var resp = JSON.parse(xhr.responseText);\n\n      for (let i = 0; i < resp.movies.length; i++) {\n        var movie = resp.movies[i];\n        movieList.push(movie);\n      }\n    });\n    xhr.open('GET', url);\n    xhr.send();\n  }\n}\n\nfunction constructCinemasSuggestions() {\n  //in case api down uncomment below\n  var data = require('./backupjson/getallcinemas.json');\n\n  for (let i = 0; i < data.cinemas.length; i++) {\n    var cinema = data.cinemas[i];\n    suggestions.push({\n      label: cinema.name,\n      id: cinema.id,\n      city_id: cinema.city_id\n    });\n  } //api method\n  // var xhr = new XMLHttpRequest()\n  // let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + apikey;\n  // xhr.addEventListener('load', () => {\n  //     var resp = JSON.parse(xhr.responseText);\n  //     var cinemasArr = [];\n  //     suggestions.length = 0;\n  //     for (let i = 0; i < resp.cinemas.length; i++) {\n  //         var cinema = resp.cinemas[i];\n  //         suggestions.push({\n  //             label: cinema.name,\n  //             id: cinema.id,\n  //             city_id: cinema.city_id,\n  //         });\n  //     }\n  // })\n  // xhr.open('GET', url)\n  // xhr.send()\n\n}\n\nfunction renderInputComponent(inputProps) {\n  const classes = inputProps.classes,\n        _inputProps$inputRef = inputProps.inputRef,\n        inputRef = _inputProps$inputRef === void 0 ? () => {} : _inputProps$inputRef,\n        ref = inputProps.ref,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    name: \"cinema\",\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }));\n}\n\nfunction renderSuggestion(suggestion, {\n  query,\n  isHighlighted\n}) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n  return React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, parts.map(part => React.createElement(\"span\", {\n    key: part.text,\n    style: {\n      fontWeight: part.highlight ? 500 : 400\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, part.text))));\n}\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nfunction checkDisable() {\n  if (movieList.length <= 0) {\n    return true;\n  }\n\n  return false;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 100,\n    flexGrow: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginBottom: 10\n  },\n  formControl: {\n    margin: theme.spacing(3),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    width: 250\n  },\n  container: {\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n    width: 250\n  },\n  suggestion: {\n    display: 'block',\n    cursor: 'pointer'\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  },\n  divider: {\n    height: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    width: 250\n  }\n}));\nexport default function IntegrationAutosuggest() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState({\n    single: '',\n    popper: '',\n    showForm: false,\n    planId: '',\n    redirect: false\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const _React$useState3 = React.useState({\n    movie: ''\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        values = _React$useState4[0],\n        setValues = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        stateSuggestions = _React$useState6[0],\n        setSuggestions = _React$useState6[1];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const handleSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const handleChange = name => (event, {\n    newValue\n  }) => {\n    setState(_objectSpread({}, state, {\n      [name]: newValue\n    }));\n    setMovieArr(newValue);\n  };\n\n  const handleSelectChange = event => {\n    setValues(oldValues => _objectSpread({}, oldValues, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const handleIdChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setState(_objectSpread({}, state, {\n      [name]: value\n    }));\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (values.movie == '') {\n      window.alert('Please enter a valid cinema and movie!');\n    } else {\n      setState(_objectSpread({}, state, {\n        ['showForm']: true\n      }));\n    }\n\n    console.log(state.showForm);\n  };\n\n  const handleIdSubmit = event => {\n    event.preventDefault();\n    console.log(\"cinema name: \", state.single, \"movie: \", values.movie);\n    setState(_objectSpread({}, state, {\n      ['redirect']: true\n    }));\n    console.log(state.redirect);\n  };\n\n  if (state.showForm) {\n    return React.createElement(Redirect, {\n      push: true,\n      from: \"/\",\n      to: {\n        pathname: '/form',\n        state: {\n          cinema: state.single,\n          movie_id: values.movie\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    });\n  } else if (state.redirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      from: \"/\",\n      to: {\n        pathname: '/plantomeet',\n        state: {\n          planid: state.planId\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    style: {\n      paddingTop: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351\n    },\n    __self: this\n  }, React.createElement(Jumbotron, {\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, \"Plan to Meet\")), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357\n    },\n    __self: this\n  }, constructCinemasSuggestions(), React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: classes.root,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363\n    },\n    __self: this\n  }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n    inputProps: {\n      //   style: {display : 'inline'},\n      classes,\n      id: 'react-autosuggest-simple',\n      label: 'Cinema',\n      placeholder: 'Search a cinema',\n      value: state.single,\n      onChange: handleChange('single')\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    } // style = {{display: 'inline'}}\n    ,\n    renderSuggestionsContainer: options => React.createElement(Paper, Object.assign({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    },\n    __self: this\n  }, React.createElement(Select, {\n    value: values.movie,\n    onChange: handleSelectChange,\n    name: \"movie\",\n    displayEmpty: true,\n    className: classes.selectEmpty,\n    label: \"Movie\",\n    disabled: checkDisable() ? true : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  }, \"Select Movie\"), movieList.map((movie, index) => React.createElement(MenuItem, {\n    key: index,\n    value: movie.id,\n    name: \"movie\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406\n    },\n    __self: this\n  }, \" \", movie.title)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.button,\n    type: \"submit\",\n    style: {\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414\n    },\n    __self: this\n  }, \"Submit\"))))))), React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429\n    },\n    __self: this\n  }, \"Or\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430\n    },\n    __self: this\n  }), React.createElement(Jumbotron, {\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435\n    },\n    __self: this\n  }, \"Enter an existing Plan ID to vote!\")), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: classes.root,\n    autoComplete: \"off\",\n    onSubmit: handleIdSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    inputProps: {\n      //   style: {display : 'inline'},\n      classes,\n      id: 'autosuggest',\n      label: 'Plan ID',\n      placeholder: 'Enter existing Plan ID',\n      value: state.planId // onChange: handleIdChange('planId'),\n\n    },\n    name: \"planId\",\n    onChange: handleIdChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.button,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465\n    },\n    __self: this\n  }, \"Submit\"))))))));\n}","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/Plan.js"],"names":["React","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","makeStyles","Button","Grid","InputLabel","FormHelperText","FormControl","Select","axios","Redirect","Table","Jumbotron","Container","Row","Col","suggestions","movieList","apikey","setMovieArr","input","result_id","length","i","cinema","label","toLowerCase","id","xhr","XMLHttpRequest","url","addEventListener","resp","JSON","responseText","movies","movie","push","open","send","constructCinemasSuggestions","data","require","cinemas","name","city_id","renderInputComponent","inputProps","classes","inputRef","ref","other","node","renderSuggestion","suggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","getSuggestions","value","inputValue","trim","inputLength","count","filter","keep","slice","getSuggestionValue","checkDisable","useStyles","theme","root","height","flexGrow","display","flexWrap","marginBottom","formControl","margin","spacing","minWidth","selectEmpty","marginTop","width","container","position","suggestionsContainerOpen","zIndex","left","right","cursor","suggestionsList","padding","listStyleType","divider","button","IntegrationAutosuggest","useState","single","popper","showForm","planId","redirect","state","setState","values","setValues","stateSuggestions","setSuggestions","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","event","newValue","handleSelectChange","oldValues","target","handleIdChange","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","handleSubmit","preventDefault","window","alert","console","log","handleIdSubmit","pathname","movie_id","planid","paddingTop","textAlign","placeholder","onChange","options","containerProps","children","index","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\n\n\nimport { Table, Jumbotron, Container, Row, Col } from 'react-bootstrap';\n\n\n\n\n\n\nconst suggestions = [];\nconst movieList = [];\nconst apikey = \"7UiR6NYdJicQiXms2GOxJSqBddHXuivw\";\n\nfunction setMovieArr(input) {\n    var result_id = '';\n    movieList.length = 0;\n    for (let i = 0; i < suggestions.length; i++) {\n        var cinema = suggestions[i];\n        if (cinema.label.toLowerCase() == input.toLowerCase()) {\n            result_id = cinema.id;\n        }\n    }\n\n    if (result_id != '') {\n\n        var xhr = new XMLHttpRequest()\n        let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=\" + apikey;\n        xhr.addEventListener('load', () => {\n            // update the state of the component with the result here\n            var resp = JSON.parse(xhr.responseText);\n\n\n            for (let i = 0; i < resp.movies.length; i++) {\n                var movie = resp.movies[i];\n                movieList.push(movie);\n            }\n        })\n        xhr.open('GET', url)\n        xhr.send()\n\n    }\n\n\n}\n\n\nfunction constructCinemasSuggestions() {\n    //in case api down uncomment below\n    var data = require('./backupjson/getallcinemas.json');\n\n    for (let i = 0; i < data.cinemas.length; i++) {\n        var cinema = data.cinemas[i];\n        suggestions.push({\n            label: cinema.name,\n            id: cinema.id,\n            city_id: cinema.city_id,\n        });\n    }\n\n    //api method\n    // var xhr = new XMLHttpRequest()\n    // let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + apikey;\n    // xhr.addEventListener('load', () => {\n    //     var resp = JSON.parse(xhr.responseText);\n    //     var cinemasArr = [];\n    //     suggestions.length = 0;\n    //     for (let i = 0; i < resp.cinemas.length; i++) {\n    //         var cinema = resp.cinemas[i];\n    //         suggestions.push({\n    //             label: cinema.name,\n    //             id: cinema.id,\n    //             city_id: cinema.city_id,\n    //         });\n    //     }\n\n    // })\n    // xhr.open('GET', url)\n    // xhr.send()\n\n}\n\nfunction renderInputComponent(inputProps) {\n    const { classes, inputRef = () => { }, ref, ...other } = inputProps;\n\n    return (\n        <TextField\n            name=\"cinema\"\n\n            InputProps={{\n                inputRef: node => {\n                    ref(node);\n                    inputRef(node);\n                },\n                classes: {\n                    input: classes.input,\n                },\n            }}\n            {...other}\n        />\n    );\n}\n\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\n    const matches = match(suggestion.label, query);\n    const parts = parse(suggestion.label, matches);\n\n    return (\n        <MenuItem selected={isHighlighted} component=\"div\">\n            <div>\n                {parts.map(part => (\n                    <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\n                        {part.text}\n                    </span>\n                ))}\n            </div>\n        </MenuItem>\n    );\n}\n\n\n\nfunction getSuggestions(value) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n\n    return inputLength === 0\n        ? []\n        : suggestions.filter(suggestion => {\n            const keep =\n                count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n            if (keep) {\n                count += 1;\n            }\n\n            return keep;\n        });\n}\n\nfunction getSuggestionValue(suggestion) {\n    return suggestion.label;\n}\n\nfunction checkDisable() {\n    if (movieList.length <= 0) {\n        return true\n    }\n    return false\n}\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: 100,\n        flexGrow: 1,\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginBottom: 10,\n    },\n    formControl: {\n        margin: theme.spacing(3),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n        width: 250,\n    },\n    container: {\n        position: 'relative',\n    },\n    suggestionsContainerOpen: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: theme.spacing(1),\n        left: 0,\n        right: 0,\n        width: 250,\n    },\n    suggestion: {\n        display: 'block',\n        cursor: 'pointer',\n    },\n    suggestionsList: {\n        margin: 0,\n        padding: 0,\n        listStyleType: 'none',\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    input: {\n        width: 250,\n    }\n}));\n\n\n\nexport default function IntegrationAutosuggest() {\n\n\n    const classes = useStyles();\n\n    const [state, setState] = React.useState({\n        single: '',\n        popper: '',\n        showForm: false,\n        planId: '',\n        redirect: false,\n    });\n\n    const [values, setValues] = React.useState({\n        movie: '',\n    });\n\n\n    const [stateSuggestions, setSuggestions] = React.useState([]);\n\n\n\n    const handleSuggestionsFetchRequested = ({ value }) => {\n        setSuggestions(getSuggestions(value));\n    };\n\n\n    const handleSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    };\n\n    const handleChange = name => (event, { newValue }) => {\n        setState({\n            ...state,\n            [name]: newValue,\n        });\n        setMovieArr(newValue);\n    };\n\n    const handleSelectChange = event => {\n\n        setValues(oldValues => ({\n            ...oldValues,\n            [event.target.name]: event.target.value,\n        }));\n    };\n\n\n    const handleIdChange = (event) => {\n        const { target: { name, value } } = event;\n\n        setState({\n            ...state,\n            [name]: value,\n        });\n\n    }\n\n\n    const autosuggestProps = {\n        renderInputComponent,\n        suggestions: stateSuggestions,\n        onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n        onSuggestionsClearRequested: handleSuggestionsClearRequested,\n        getSuggestionValue,\n        renderSuggestion,\n    };\n\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        if (values.movie == '') {\n            window.alert('Please enter a valid cinema and movie!');\n        } else {\n            setState({\n                ...state,\n                ['showForm']: true,\n            });\n\n        }\n\n\n        console.log(state.showForm);\n\n    }\n\n\n    const handleIdSubmit = event => {\n        event.preventDefault();\n\n        console.log(\"cinema name: \", state.single, \"movie: \", values.movie);\n\n\n        setState({\n            ...state,\n            ['redirect']: true,\n        });\n\n\n        console.log(state.redirect);\n\n    }\n\n\n\n    if (state.showForm) {\n        return (\n            <Redirect push from='/' to={{\n                pathname: '/form',\n                state: {\n                    cinema: state.single,\n                    movie_id: values.movie,\n                }\n            }} />\n        );\n\n    } else if (state.redirect) {\n        return (\n            <Redirect push from='/' to={{\n                pathname: '/plantomeet',\n                state: {\n                    planid: state.planId,\n                }\n            }} />\n        );\n    }\n\n\n\n    return (\n        <div style={{ paddingTop: \"20px\" }}>\n\n            <Jumbotron fluid >\n\n                <Container >\n                    <div style={{ textAlign: \"center\" }} ><h2>Plan to Meet</h2></div>\n                    <Grid container justify=\"center\">\n                        {constructCinemasSuggestions()}\n\n                        <Grid>\n                            <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit}>\n\n                                <FormControl className={classes.formControl} >\n\n                                    <Autosuggest\n\n                                        {...autosuggestProps}\n                                        inputProps={{\n                                            //   style: {display : 'inline'},\n                                            classes,\n                                            id: 'react-autosuggest-simple',\n                                            label: 'Cinema',\n                                            placeholder: 'Search a cinema',\n                                            value: state.single,\n                                            onChange: handleChange('single'),\n                                        }}\n                                        theme={{\n                                            container: classes.container,\n                                            suggestionsContainerOpen: classes.suggestionsContainerOpen,\n                                            suggestionsList: classes.suggestionsList,\n                                            suggestion: classes.suggestion,\n                                        }}\n                                        // style = {{display: 'inline'}}\n                                        renderSuggestionsContainer={options => (\n                                            <Paper {...options.containerProps} square>\n                                                {options.children}\n                                            </Paper>\n                                        )}\n                                    />\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <Select\n                                        value={values.movie}\n                                        onChange={handleSelectChange}\n                                        name=\"movie\"\n                                        displayEmpty\n                                        className={classes.selectEmpty}\n                                        label='Movie'\n                                        disabled={checkDisable() ? true : null}\n                                    >\n                                        <MenuItem value=\"\" disabled>\n                                            Select Movie\n                </MenuItem>\n                                        {movieList.map((movie, index) =>\n                                            <MenuItem key={index} value={movie.id} name=\"movie\" > {movie.title}</MenuItem>\n                                        )}\n                                    </Select>\n\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n\n                                    <Button variant=\"contained\" color=\"secondary\" className={classes.button} type=\"submit\" style={{ height: \"100%\" }}>\n                                        Submit\n        </Button>\n\n\n                                </FormControl>\n\n                            </form>\n\n                        </Grid>\n                    </Grid>\n                </Container>\n            </Jumbotron>\n\n\n            <div style={{ textAlign: \"center\" }} ><h2>Or</h2></div>\n            <br></br>\n\n            <Jumbotron fluid>\n\n                <Container >\n                    <div style={{ textAlign: \"center\" }} ><h2>Enter an existing Plan ID to vote!</h2></div>\n                    <Grid container justify=\"center\">\n\n\n                        <Grid>\n                            <form className={classes.root} autoComplete=\"off\" onSubmit={handleIdSubmit}>\n\n                                <FormControl className={classes.formControl} >\n                                    <TextField\n                                        inputProps={{\n                                            //   style: {display : 'inline'},\n                                            classes,\n                                            id: 'autosuggest',\n                                            label: 'Plan ID',\n                                            placeholder: 'Enter existing Plan ID',\n                                            value: state.planId,\n                                            // onChange: handleIdChange('planId'),\n\n                                        }}\n\n                                        name=\"planId\"\n                                        onChange={handleIdChange}\n\n                                    />\n\n                                </FormControl>\n\n\n                                <FormControl className={classes.formControl}>\n\n                                    <Button variant=\"contained\" color=\"secondary\" className={classes.button} type=\"submit\">\n                                        Submit\n</Button>\n                                </FormControl>\n\n                            </form>\n\n                        </Grid>\n                    </Grid>\n                </Container>\n            </Jumbotron>\n        </div>\n    );\n\n}"]},"metadata":{},"sourceType":"module"}