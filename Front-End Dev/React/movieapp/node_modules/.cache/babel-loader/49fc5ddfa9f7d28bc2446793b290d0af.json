{"ast":null,"code":"var _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/PlanToMeet.js\";\nimport React from 'react';\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap'; // import Button from '@material-ui/core/Button';\n\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\nclass PlanToMeet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      planid: this.props.location.state.planid,\n      result_arr: [],\n      name: '',\n      participant: '',\n      participantExists: false,\n      showForm: false,\n      cinema: '',\n      movie: '',\n      showtimeSelect: '',\n      showResult: false,\n      resultVote: [],\n      participants: [],\n      apikeyIS: '5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK',\n      movieDetails: '',\n      cinemaDetails: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSubmitVote = this.handleSubmitVote.bind(this);\n  }\n\n  componentDidMount() {\n    this.getDataFromPhp();\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"hey\");\n    var planid = this.state.planid;\n    var name = this.state.name;\n    var params = \"planid=\" + planid + \"&name=\" + name;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        console.log(this.responseText);\n\n        if (this.responseText == \"exist\") {\n          //name existed alr\n          that.setState({\n            participantExists: true\n          });\n        } else {\n          var participantObj = JSON.parse(this.responseText);\n          console.log(participantObj);\n          that.setState({\n            participant: participantObj,\n            showForm: true\n          });\n        }\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/addparticipant.php?\" + params, true);\n    request.send();\n  }\n\n  handleSubmitVote(event) {\n    event.preventDefault();\n    console.log(\"hey2\");\n    var planid = this.state.planid;\n    var name = this.state.name;\n    var selectedShowtime = encodeURI(this.state.showtimeSelect);\n    console.log(selectedShowtime);\n    var params = \"planid=\" + planid + \"&name=\" + name + \"&selectedShowtime=\" + selectedShowtime;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var voteObj = JSON.parse(this.responseText);\n        console.log(voteObj);\n        that.setState({\n          participant: voteObj\n        }, () => {\n          that.getParticipants();\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/submitvote.php?\" + params, true);\n    request.send();\n  }\n\n  getUpdatedResult() {\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var result = JSON.parse(this.responseText);\n        console.log(result);\n        that.setState({\n          result_arr: result\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n    request.send();\n  }\n\n  getParticipants() {\n    var planid = this.state.planid;\n    var params = \"planid=\" + planid;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var participantsObj = JSON.parse(this.responseText);\n        console.log(participantsObj);\n        that.setState({\n          participants: participantsObj,\n          showResult: true\n        }, () => {\n          that.getUpdatedResult();\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrieveparticipants.php?\" + params, true);\n    request.send();\n  }\n\n  getParticipantsWithoutUpdatingResult() {\n    var planid = this.state.planid;\n    var params = \"planid=\" + planid;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var participantsObj = JSON.parse(this.responseText);\n        console.log(participantsObj);\n        that.setState({\n          participants: participantsObj\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrieveparticipants.php?\" + params, true);\n    request.send();\n  }\n\n  checkVoter(showtime, participant) {\n    if (showtime == participant.showtimeVoted) {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, participant.name);\n    }\n  }\n\n  displayResult() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n    const centralize = {\n      margin: \"auto\",\n      width: \"100%\",\n      // textAlign: 'center',\n      paddingTop: \"30px\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Container, {\n      style: centralize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Result for Plan ID: \", this.state.planid), this.displayMovieCinemaDetails(), React.createElement(\"p\", {\n      style: bold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"Votes Result:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, this.state.participants.map((value, index) => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.displayShowtimeVote(value)) //    <p>{value.name} has voted for {this.printDate(value.showtimeVoted)} </p> \n    ))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"S/No\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Showtime\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Number of vote(s)\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Voter(s)\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, this.state.result_arr.map((value, index) => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, this.printDate(value.showtime)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, value.counter), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, this.state.participants.map((value2, index2) => React.createElement(\"span\", {\n      id: index2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, this.checkVoter(value.showtime, value2))))))))))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }))));\n  }\n\n  displayMovieCinemaDetails() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    var movieDetails = this.state.movieDetails;\n    var cinemaDetails = this.state.cinemaDetails;\n    return React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"You are logged in as '\", this.state.name, \"'\"), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(MDBCardImage, {\n      className: \"img-fluid pb-3\",\n      src: movieDetails.poster_image_thumbnail,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: bold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Movie Title \")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, this.state.movie), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: bold,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Cinema \")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, this.state.cinema), this.displayTimeslotResult()))));\n  }\n\n  displayTimeslotResult() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    var timeslotResults = this.state.result_arr;\n    var highestCount = timeslotResults[0].counter;\n    var result = new Array(timeslotResults[0]);\n\n    for (let i = 1; i < timeslotResults.length; i++) {\n      if (timeslotResults[i].counter == highestCount) {\n        result.push(timeslotResults[i]);\n      } else if (timeslotResults[i].counter > highestCount) {\n        highestCount = timeslotResults[i].counter;\n        result = new Array(timeslotResults[i]);\n      }\n    }\n\n    console.log(result);\n\n    if (result.length > 1) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, \"Highest timeslots voted are: \"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, result.map((value, index) => React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, this.printDate(value.showtime)) //    <p>{value.name} has voted for {this.printDate(value.showtimeVoted)} </p> \n      )));\n    } else {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: bold,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, \"Highest timeslot voted is:\"), \" \", this.printDate(result[0].showtime));\n    }\n  }\n\n  displayShowtimeVote(participant) {\n    return participant.name + \" has voted for \" + this.printDate(participant.showtimeVoted);\n  }\n\n  displayForm() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const center = {\n      textAlign: 'center'\n    };\n    const centralize = {\n      margin: \"auto\",\n      width: \"50%\",\n      textAlign: 'center',\n      paddingTop: \"30px\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"Logged in as: \", this.state.name), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Cinema\"), React.createElement(Form.Control, {\n      value: this.state.result_arr[0].cinema,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridPassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Movie\"), React.createElement(Form.Control, {\n      value: this.state.result_arr[0].movie,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }))), React.createElement(Form.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridState\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \"Select Showtime\"), React.createElement(Form.Control, {\n      as: \"select\",\n      name: \"showtimeSelect\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, this.state.result_arr.map((value, index) => React.createElement(\"option\", {\n      value: value.showtime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, this.printDate(value.showtime)))))), React.createElement(\"div\", {\n      style: centralize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      name: \"vote\",\n      onClick: this.handleSubmitVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, \"Submit Vote\"))))));\n  }\n\n  printDate(stringDate) {\n    var date = new Date(stringDate); // console.log((date.getMonth()+1) + '/' + date.getDate() + '/' +  date.getFullYear())\n\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    var strTime = hours + ':' + minutes + ' ' + ampm;\n    stringDate = \"Date: \" + (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear() + \" Time: \" + strTime;\n    return stringDate;\n  }\n\n  getTotalCounts() {\n    var result_arr = this.state.result_arr;\n    var totalCount = parseInt(result_arr[0].counter);\n    console.log(totalCount);\n\n    for (let i = 1; i < result_arr.length; i++) {\n      totalCount += parseInt(result_arr[i].counter);\n      console.log(totalCount);\n    }\n\n    console.log(totalCount);\n    return totalCount;\n  }\n\n  checkParticipantExists() {\n    var planid = this.state.planid;\n    var name = this.state.name;\n    var params = \"planid=\" + planid + \"&name=\" + name;\n    var that = this;\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var participantObj = JSON.parse(this.responseText);\n        console.log(participantObj);\n\n        if (participantObj !== null) {\n          that.setState({\n            participantExists: true\n          });\n        }\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrieveparticipantbynameid.php?\" + params, true);\n    request.send();\n  }\n\n  render() {\n    console.log(this.state);\n    console.log(this.state.result_arr.length);\n\n    if (this.state.showResult || this.state.participantExists) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, this.displayResult());\n    }\n\n    if (this.state.showForm) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, this.displayForm());\n    }\n\n    if (this.state.result_arr.length > 0) {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }, \"Vote for \", this.state.result_arr[0].movie, \"'s showtimes at \", this.state.result_arr[0].cinema), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523\n        },\n        __self: this\n      }, \"Share Plan ID: \", this.state.planid, \" with your friends to let them vote as well!\"), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527\n        },\n        __self: this\n      }, React.createElement(Form.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, \"Enter Name to vote\"), React.createElement(Form.Control, {\n        name: \"name\",\n        type: \"text\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"formGridPassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        name: \"name\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    });\n  } // getData() {\n  //     const queryString = require('query-string');\n  //     const parsed = queryString.parse(this.props.location.search);\n  //     console.log(parsed.id);\n  //     this.setState({\n  //         planid: parsed.id\n  //     }, () => {\n  //         this.getDataFromPhp();\n  //     });\n  // }\n\n\n  getDataFromPhp() {\n    var that = this;\n    var request = new XMLHttpRequest();\n    console.log(this.state.planid);\n\n    request.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        var result = JSON.parse(this.responseText);\n        console.log(result);\n        that.setState({\n          result_arr: result,\n          showtimeSelect: result[0].showtime,\n          movie: result[0].movie,\n          cinema: result[0].cinema\n        }, () => {\n          that.getParticipantsWithoutUpdatingResult();\n          that.getMovieDetails();\n          that.getCinemaDetails();\n        });\n      }\n    };\n\n    request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n    request.send();\n  }\n\n  getCinemaDetails() {\n    var xhr = new XMLHttpRequest();\n    let urlCinema = \"https://api.internationalshowtimes.com/v4/cinemas/?countries=SG&apikey=\" + this.state.apikeyIS;\n    xhr.addEventListener('load', () => {\n      var resp = JSON.parse(xhr.responseText);\n      var cinema_Arr = resp.cinemas; // console.log(cinema_Arr)\n\n      for (let i = 0; i < cinema_Arr.length; i++) {\n        // console.log(cinema_Arr[i].name)\n        if (this.state.cinema.toLowerCase() == cinema_Arr[i].name.toLowerCase()) {\n          this.setState({\n            cinemaDetails: cinema_Arr[i]\n          });\n        }\n      }\n    });\n    xhr.open('GET', urlCinema);\n    xhr.send();\n  }\n\n  getMovieDetails() {\n    var xhr = new XMLHttpRequest();\n    let urlCinema = \" https://api.internationalshowtimes.com/v4/movies/?countries=SG&apikey=\" + this.state.apikeyIS;\n    xhr.addEventListener('load', () => {\n      var resp = JSON.parse(xhr.responseText);\n      var movie_Arr = resp.movies;\n\n      for (let i = 0; i < movie_Arr.length; i++) {\n        if (this.state.movie == movie_Arr[i].title) {\n          this.setState({\n            movieDetails: movie_Arr[i]\n          });\n        }\n      }\n    });\n    xhr.open('GET', urlCinema);\n    xhr.send();\n  }\n\n}\n\nexport default PlanToMeet;","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/PlanToMeet.js"],"names":["React","Table","Jumbotron","Container","Row","Col","Button","Form","MDBCardImage","Redirect","PlanToMeet","Component","constructor","props","state","planid","location","result_arr","name","participant","participantExists","showForm","cinema","movie","showtimeSelect","showResult","resultVote","participants","apikeyIS","movieDetails","cinemaDetails","handleChange","bind","handleSubmit","handleSubmitVote","componentDidMount","getDataFromPhp","event","target","value","setState","preventDefault","console","log","params","that","request","XMLHttpRequest","onreadystatechange","readyState","status","responseText","participantObj","JSON","parse","open","send","selectedShowtime","encodeURI","voteObj","getParticipants","getUpdatedResult","result","participantsObj","getParticipantsWithoutUpdatingResult","checkVoter","showtime","showtimeVoted","displayResult","bold","fontWeight","center","textAlign","centralize","margin","width","paddingTop","displayMovieCinemaDetails","map","index","displayShowtimeVote","printDate","counter","value2","index2","poster_image_thumbnail","displayTimeslotResult","timeslotResults","highestCount","Array","i","length","push","displayForm","stringDate","date","Date","hours","getHours","minutes","getMinutes","ampm","strTime","getMonth","getDate","getFullYear","getTotalCounts","totalCount","parseInt","checkParticipantExists","render","getMovieDetails","getCinemaDetails","xhr","urlCinema","addEventListener","resp","cinema_Arr","cinemas","toLowerCase","movie_Arr","movies","title"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nimport { Table, Jumbotron, Container, Row, Col, Button, Form } from 'react-bootstrap';\n// import Button from '@material-ui/core/Button';\nimport { MDBCardImage } from \"mdbreact\";\nimport { Redirect } from 'react-router';\n\n\nclass PlanToMeet extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            planid: this.props.location.state.planid,\n            result_arr: [],\n            name: '',\n            participant: '',\n            participantExists: false,\n            showForm: false,\n            cinema: '',\n            movie: '',\n            showtimeSelect: '',\n            showResult: false,\n            resultVote: [],\n            participants: [],\n            apikeyIS: '5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK',\n            movieDetails: '',\n            cinemaDetails: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleSubmitVote = this.handleSubmitVote.bind(this);\n    }\n\n    componentDidMount() {\n        this.getDataFromPhp();\n\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n\n\n        this.setState({\n            [name]: value,\n        });\n\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(\"hey\");\n        var planid = this.state.planid;\n        var name = this.state.name;\n        var params = \"planid=\" + planid + \"&name=\" + name;\n\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                console.log(this.responseText)\n                if (this.responseText == \"exist\") { //name existed alr\n                    that.setState({\n                        participantExists: true,\n                    })\n\n                } else {\n                    var participantObj = JSON.parse(this.responseText);\n                    console.log(participantObj);\n                    that.setState({\n                        participant: participantObj,\n                        showForm: true,\n                    })\n\n                }\n\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/addparticipant.php?\" + params, true);\n        request.send();\n\n    }\n\n    handleSubmitVote(event) {\n        event.preventDefault();\n        console.log(\"hey2\")\n        var planid = this.state.planid;\n        var name = this.state.name;\n        var selectedShowtime = encodeURI(this.state.showtimeSelect);\n        console.log(selectedShowtime);\n        var params = \"planid=\" + planid + \"&name=\" + name + \"&selectedShowtime=\" + selectedShowtime;\n\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var voteObj = JSON.parse(this.responseText);\n                console.log(voteObj);\n                that.setState({\n                    participant: voteObj,\n                }, () => {\n                    that.getParticipants();\n                });\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/submitvote.php?\" + params, true);\n        request.send();\n\n\n\n    }\n\n    getUpdatedResult() {\n        var that = this;\n\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var result = JSON.parse(this.responseText);\n                console.log(result);\n                that.setState({\n                    result_arr: result,\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n        request.send();\n    }\n\n\n    getParticipants() {\n        var planid = this.state.planid;\n        var params = \"planid=\" + planid;\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var participantsObj = JSON.parse(this.responseText);\n                console.log(participantsObj);\n                that.setState({\n                    participants: participantsObj,\n                    showResult: true,\n                }, () => {\n                    that.getUpdatedResult();\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrieveparticipants.php?\" + params, true);\n        request.send();\n\n\n    }\n\n    getParticipantsWithoutUpdatingResult() {\n        var planid = this.state.planid;\n        var params = \"planid=\" + planid;\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var participantsObj = JSON.parse(this.responseText);\n                console.log(participantsObj);\n                that.setState({\n                    participants: participantsObj,\n                })\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrieveparticipants.php?\" + params, true);\n        request.send();\n\n    }\n\n    checkVoter(showtime, participant) {\n        if (showtime == participant.showtimeVoted) {\n            return (<li>{participant.name}</li>\n            )\n        }\n\n    }\n\n\n    displayResult() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n        const centralize = {\n            margin: \"auto\",\n            width: \"100%\",\n            // textAlign: 'center',\n            paddingTop: \"30px\"\n        };\n\n\n        return (\n            <div>\n                <Jumbotron fluid>\n                    <Container style={centralize}>\n                      \n                        <Row>\n                        <Col>\n                        <h2 >Result for Plan ID: {this.state.planid}</h2>\n                                {this.displayMovieCinemaDetails()}\n                                <p style={bold}>Votes Result:</p>\n                                <ul>\n                                    {this.state.participants.map((value, index) => (\n                                        <li>{this.displayShowtimeVote(value)}</li>\n                                        //    <p>{value.name} has voted for {this.printDate(value.showtimeVoted)} </p> \n                                    ))}\n                                </ul>\n                                \n\n                            </Col>\n                            <Col>\n                                <Table striped bordered hover variant=\"dark\"  >\n                                    <thead>\n                                        <tr>\n                                            <th>S/No</th>\n                                            <th>Showtime</th>\n                                            <th>Number of vote(s)</th>\n                                            <th>Voter(s)</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.result_arr.map((value, index) => (\n\n                                            <tr>\n                                                <td>{index + 1}</td>\n                                                <td >{this.printDate(value.showtime)}</td>\n                                                <td>{value.counter}</td>\n                                                <td>\n\n                                                    <ul>\n\n                                                        {this.state.participants.map((value2, index2) => (\n                                                            <span id={index2}>{this.checkVoter(value.showtime, value2)}</span>\n                                                        ))}\n\n                                                    </ul>\n\n                                                </td>\n\n                                            </tr>\n                                        ))}\n                                    </tbody>\n\n                                </Table>\n\n                            </Col>\n                            \n\n                        </Row>\n\n\n                        <br></br>\n\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n\n\n    }\n\n    displayMovieCinemaDetails() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n        var movieDetails = this.state.movieDetails;\n        var cinemaDetails = this.state.cinemaDetails;\n\n        return (\n            <Jumbotron fluid>\n            <Container>\n            \n                        <p >You are logged in as '{this.state.name}'</p>\n            <Row>\n            <Col>\n                <MDBCardImage\n                    className=\"img-fluid pb-3\" \n                    src={movieDetails.poster_image_thumbnail}\n                /> \n              \n                    <p><span style={bold}>Movie Title </span></p>\n                    <p>{this.state.movie}</p>\n                    <p><span style={bold}>Cinema </span></p>\n                    <p>{this.state.cinema}</p>\n                    {this.displayTimeslotResult()}\n\n                </Col>\n               \n\n            </Row>\n            </Container>\n            </Jumbotron>\n\n        )\n\n\n    }\n\n    displayTimeslotResult() {\n\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        var timeslotResults = this.state.result_arr;\n        var highestCount = timeslotResults[0].counter;\n        var result = new Array(timeslotResults[0]);\n        for (let i = 1; i < timeslotResults.length; i++) {\n            if (timeslotResults[i].counter == highestCount) {\n                result.push(timeslotResults[i]);\n            } else if (timeslotResults[i].counter > highestCount) {\n                highestCount = timeslotResults[i].counter;\n                result = new Array(timeslotResults[i]);\n            }\n        }\n\n        console.log(result);\n\n        if (result.length > 1) {\n            return (\n                <div>\n                    <p style={bold}>Highest timeslots voted are: </p>\n                    <ul>\n                        {result.map((value, index) => (\n                            <li>{this.printDate(value.showtime)}</li>\n                            //    <p>{value.name} has voted for {this.printDate(value.showtimeVoted)} </p> \n                        ))}\n                    </ul>\n                </div>\n            )\n        } else {\n            return (\n\n                <p><span style={bold}>Highest timeslot voted is:</span> {this.printDate(result[0].showtime)}</p>\n            )\n        }\n    }\n\n    displayShowtimeVote(participant) {\n\n        return participant.name + \" has voted for \" + this.printDate(participant.showtimeVoted);\n    }\n\n    displayForm() {\n        const bold = {\n            fontWeight: 'bold',\n        };\n\n        const center = {\n            textAlign: 'center',\n        };\n\n        const centralize = {\n            margin: \"auto\",\n            width: \"50%\",\n            textAlign: 'center',\n            paddingTop: \"30px\"\n        };\n        return (\n            <div>\n\n\n                <Jumbotron fluid>\n\n                    <Container>\n                        <p>Logged in as: {this.state.name}</p>\n                        <Form>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridEmail\">\n                                    <Form.Label>Cinema</Form.Label>\n                                    <Form.Control value={this.state.result_arr[0].cinema} disabled />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridPassword\">\n                                    <Form.Label>Movie</Form.Label>\n                                    <Form.Control value={this.state.result_arr[0].movie} disabled />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridState\">\n                                    <Form.Label>Select Showtime</Form.Label>\n                                    <Form.Control as=\"select\" name=\"showtimeSelect\" onChange={this.handleChange}>\n\n                                        {this.state.result_arr.map((value, index) => (\n\n                                            <option value={value.showtime}>{this.printDate(value.showtime)}</option>\n                                        ))}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n\n                            <div style={centralize}>\n                                <Button variant=\"primary\" type=\"submit\" name=\"vote\" onClick={this.handleSubmitVote}>\n                                    Submit Vote\n                        </Button>\n                            </div>\n\n                        </Form>\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n\n\n\n\n    }\n\n    printDate(stringDate) {\n        var date = new Date(stringDate);\n        // console.log((date.getMonth()+1) + '/' + date.getDate() + '/' +  date.getFullYear())\n\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12; // the hour '0' should be '12'\n        minutes = minutes < 10 ? '0' + minutes : minutes;\n        var strTime = hours + ':' + minutes + ' ' + ampm;\n        stringDate = \"Date: \" + (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear() + \" Time: \" + strTime;\n\n        return stringDate;\n\n    }\n\n    getTotalCounts() {\n\n        var result_arr = this.state.result_arr;\n\n        var totalCount = parseInt(result_arr[0].counter);\n        console.log(totalCount)\n\n        for (let i = 1; i < result_arr.length; i++) {\n            totalCount += parseInt(result_arr[i].counter);\n            console.log(totalCount)\n        }\n        console.log(totalCount)\n\n        return totalCount;\n\n    }\n\n    checkParticipantExists() {\n        var planid = this.state.planid;\n        var name = this.state.name;\n        var params = \"planid=\" + planid + \"&name=\" + name;\n\n        var that = this;\n        var request = new XMLHttpRequest();\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var participantObj = JSON.parse(this.responseText);\n                console.log(participantObj);\n                if (participantObj !== null) {\n                    that.setState({\n                        participantExists: true,\n                    })\n                }\n\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrieveparticipantbynameid.php?\" + params, true);\n        request.send();\n\n    }\n\n\n    render() {\n        console.log(this.state);\n        console.log(this.state.result_arr.length);\n\n\n        if (this.state.showResult || this.state.participantExists) {\n            return (\n                <div>\n                    {this.displayResult()}\n                </div>\n            )\n        }\n\n        if (this.state.showForm) {\n            return (\n                <div>\n                    {this.displayForm()}\n                </div>\n            )\n        }\n\n        if (this.state.result_arr.length > 0) {\n\n\n            return (\n\n\n                <Jumbotron fluid>\n\n                    <Container>\n\n                        <h2>Vote for {this.state.result_arr[0].movie}'s showtimes at {this.state.result_arr[0].cinema}</h2>\n                        <p>Share Plan ID: {this.state.planid} with your friends to let them vote as well!</p>\n\n\n\n                        <Form>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridEmail\">\n                                    <Form.Label>Enter Name to vote</Form.Label>\n                                    <Form.Control name=\"name\" type=\"text\" onChange={this.handleChange} />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridPassword\">\n\n                                </Form.Group>\n\n                            </Form.Row>\n                            <Button variant=\"primary\" type=\"submit\" name=\"name\" onClick={this.handleSubmit}>\n                                Submit\n                        </Button>\n\n                        </Form>\n\n                    </Container>\n                </Jumbotron>\n\n            )\n        }\n\n        return (\n            <div></div>\n\n        )\n\n    }\n\n    // getData() {\n\n    //     const queryString = require('query-string');\n    //     const parsed = queryString.parse(this.props.location.search);\n    //     console.log(parsed.id);\n\n    //     this.setState({\n    //         planid: parsed.id\n    //     }, () => {\n    //         this.getDataFromPhp();\n    //     });\n\n\n    // }\n\n    getDataFromPhp() {\n        var that = this;\n\n        var request = new XMLHttpRequest();\n\n        console.log(this.state.planid)\n\n        request.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                var result = JSON.parse(this.responseText);\n                console.log(result);\n                that.setState({\n                    result_arr: result,\n                    showtimeSelect: result[0].showtime,\n                    movie: result[0].movie,\n                    cinema: result[0].cinema,\n                }, () => {\n                    that.getParticipantsWithoutUpdatingResult();\n                    that.getMovieDetails();\n                    that.getCinemaDetails();\n                });\n            }\n        }\n        request.open(\"GET\", \"http://localhost/Project/retrievebyid.php?planid=\" + that.state.planid, true);\n        request.send();\n\n    }\n\n\n    getCinemaDetails() {\n        var xhr = new XMLHttpRequest();\n        let urlCinema = \"https://api.internationalshowtimes.com/v4/cinemas/?countries=SG&apikey=\" + this.state.apikeyIS;\n        xhr.addEventListener('load', () => {\n            var resp = JSON.parse(xhr.responseText);\n            var cinema_Arr = resp.cinemas;\n            // console.log(cinema_Arr)\n            for (let i = 0; i < cinema_Arr.length; i++) {\n                // console.log(cinema_Arr[i].name)\n                if (this.state.cinema.toLowerCase() == cinema_Arr[i].name.toLowerCase()) {\n                    this.setState({\n                        cinemaDetails: cinema_Arr[i],\n                    });\n                }\n            }\n\n        })\n\n        xhr.open('GET', urlCinema);\n        xhr.send();\n    }\n\n    getMovieDetails() {\n        var xhr = new XMLHttpRequest();\n        let urlCinema = \" https://api.internationalshowtimes.com/v4/movies/?countries=SG&apikey=\" + this.state.apikeyIS;\n        xhr.addEventListener('load', () => {\n            var resp = JSON.parse(xhr.responseText);\n            var movie_Arr = resp.movies;\n            for (let i = 0; i < movie_Arr.length; i++) {\n                if (this.state.movie == movie_Arr[i].title) {\n                    this.setState({\n                        movieDetails: movie_Arr[i],\n                    });\n                }\n            }\n\n        })\n\n        xhr.open('GET', urlCinema);\n        xhr.send();\n\n    }\n\n\n}\n\nexport default PlanToMeet;"]},"metadata":{},"sourceType":"module"}