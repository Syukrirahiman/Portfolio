{"ast":null,"code":"import _defineProperty from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/Plan.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { BrowserRouter as Router, Route, Switch, HashRouter, withRouter, Link } from 'react-router-dom';\nimport { observer } from 'mobx-react';\nimport ReactDOM from 'react-dom';\nconst suggestions = [];\nconst movieList = [];\nconst cityId = '';\nconst redirect = false;\nconst apikey = \"5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK\";\n\nfunction setMovieArr(input) {\n  var result_id = '';\n  movieList.length = 0;\n\n  for (let i = 0; i < suggestions.length; i++) {\n    var cinema = suggestions[i];\n\n    if (cinema.label.toLowerCase() == input.toLowerCase()) {\n      result_id = cinema.id;\n    }\n  }\n\n  if (result_id != '') {\n    var xhr = new XMLHttpRequest();\n    let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=\" + apikey;\n    xhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      var resp = JSON.parse(xhr.responseText);\n\n      for (let i = 0; i < resp.movies.length; i++) {\n        var movie = resp.movies[i];\n        movieList.push(movie);\n      }\n\n      console.log(movieList); // var acinema = resp.cinemas[0];\n      // console.log(acinema.name);\n    });\n    xhr.open('GET', url);\n    xhr.send();\n  }\n}\n\nfunction constructCinemasSuggestions() {\n  var xhr = new XMLHttpRequest();\n  let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + apikey;\n  xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    var resp = JSON.parse(xhr.responseText); //   this.setState({ results: resp.cinemas[0].location });\n\n    var cinemasArr = [];\n    suggestions.length = 0;\n\n    for (let i = 0; i < resp.cinemas.length; i++) {\n      var cinema = resp.cinemas[i];\n      suggestions.push({\n        label: cinema.name,\n        id: cinema.id,\n        city_id: cinema.city_id\n      });\n    }\n\n    console.log(suggestions); // var acinema = resp.cinemas[0];\n    // console.log(acinema.name);\n  });\n  xhr.open('GET', url);\n  xhr.send();\n}\n\nfunction renderInputComponent(inputProps) {\n  const classes = inputProps.classes,\n        _inputProps$inputRef = inputProps.inputRef,\n        inputRef = _inputProps$inputRef === void 0 ? () => {} : _inputProps$inputRef,\n        ref = inputProps.ref,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    name: \"cinema\",\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n}\n\nfunction renderSuggestion(suggestion, {\n  query,\n  isHighlighted\n}) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n  return React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, parts.map(part => React.createElement(\"span\", {\n    key: part.text,\n    style: {\n      fontWeight: part.highlight ? 500 : 400\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, part.text))));\n}\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 100,\n    flexGrow: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    // flexFlow: \"row wrap\",\n    // paddingLeft: 400,\n    paddingTop: 10,\n    marginBottom: 10 // background: \"yellow\",\n    // opacity: 0.2,\n    // marginLeft: auto,\n    // marginRight: auto,\n    // width: 800,\n\n  },\n  formControl: {\n    margin: theme.spacing(3),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    width: 250\n  },\n  container: {\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n    width: 250\n  },\n  suggestion: {\n    display: 'block',\n    cursor: 'pointer' // padding: '10px 20px',\n    // width:200,\n\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none' // width: 500,\n\n  },\n  divider: {\n    height: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    width: 250\n  }\n}));\nexport default function IntegrationAutosuggest() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState({\n    single: '',\n    popper: '',\n    showForm: false\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const _React$useState3 = React.useState({\n    movie: ''\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        values = _React$useState4[0],\n        setValues = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        stateSuggestions = _React$useState6[0],\n        setSuggestions = _React$useState6[1];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const handleSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const handleChange = name => (event, {\n    newValue\n  }) => {\n    setState(_objectSpread({}, state, {\n      [name]: newValue\n    })); // console.log(newValue);\n\n    setMovieArr(newValue); // setCityId(newValue);\n  };\n\n  const handleSelectChange = event => {\n    setValues(oldValues => _objectSpread({}, oldValues, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"cinema name: \", state.single, \"movie: \", values.movie);\n    const formData = {\n      'cinema': state.single,\n      \"movie_id\": values.movie\n    };\n    setState(_objectSpread({}, state, {\n      ['showForm']: true\n    }));\n    console.log(state.showForm);\n  };\n\n  const SearchBar = () => {\n    return React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, constructCinemasSuggestions(), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: classes.root,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n      inputProps: {\n        //   style: {display : 'inline'},\n        classes,\n        id: 'react-autosuggest-simple',\n        label: 'Cinema',\n        placeholder: 'Search a cinema',\n        value: state.single,\n        onChange: handleChange('single')\n      },\n      theme: {\n        container: classes.container,\n        suggestionsContainerOpen: classes.suggestionsContainerOpen,\n        suggestionsList: classes.suggestionsList,\n        suggestion: classes.suggestion\n      } // style = {{display: 'inline'}}\n      ,\n      renderSuggestionsContainer: options => React.createElement(Paper, Object.assign({}, options.containerProps, {\n        square: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }), options.children),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }))), React.createElement(FormControl, {\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(Select, {\n      value: values.movie,\n      onChange: handleSelectChange,\n      name: \"movie\",\n      displayEmpty: true,\n      className: classes.selectEmpty,\n      label: \"Movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      value: \"\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Select Movie\"), movieList.map((movie, index) => React.createElement(MenuItem, {\n      key: index,\n      value: movie.id,\n      name: \"movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \" \", movie.title)))), React.createElement(FormControl, {\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: classes.button,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"Submit\")))));\n  };\n\n  if (state.showForm) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, constructCinemasSuggestions(), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: classes.root,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n      inputProps: {\n        //   style: {display : 'inline'},\n        classes,\n        id: 'react-autosuggest-simple',\n        label: 'Cinema',\n        placeholder: 'Search a cinema',\n        value: state.single,\n        onChange: handleChange('single')\n      },\n      theme: {\n        container: classes.container,\n        suggestionsContainerOpen: classes.suggestionsContainerOpen,\n        suggestionsList: classes.suggestionsList,\n        suggestion: classes.suggestion\n      } // style = {{display: 'inline'}}\n      ,\n      renderSuggestionsContainer: options => React.createElement(Paper, Object.assign({}, options.containerProps, {\n        square: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }), options.children),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }))), React.createElement(FormControl, {\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(Select, {\n      value: values.movie,\n      onChange: handleSelectChange,\n      name: \"movie\",\n      displayEmpty: true,\n      className: classes.selectEmpty,\n      label: \"Movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      value: \"\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Select Movie\"), movieList.map((movie, index) => React.createElement(MenuItem, {\n      key: index,\n      value: movie.id,\n      name: \"movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \" \", movie.title)))), React.createElement(FormControl, {\n      className: classes.formControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      className: classes.button,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"Submit\"))))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, \"Contact Me\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      action: \"/action_page.php\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"First Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"fname\",\n      name: \"firstname\",\n      placeholder: \"Your name..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"Last Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"lname\",\n      name: \"lastname\",\n      placeholder: \"Your last name..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"Email\"), React.createElement(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      name: \"email\",\n      placeholder: \"Your email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, \"Subject\"), React.createElement(\"textarea\", {\n      id: \"subject\",\n      name: \"subject\",\n      placeholder: \"Write something..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }))));\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458\n    },\n    __self: this\n  }, constructCinemasSuggestions(), React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: classes.root,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464\n    },\n    __self: this\n  }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n    inputProps: {\n      //   style: {display : 'inline'},\n      classes,\n      id: 'react-autosuggest-simple',\n      label: 'Cinema',\n      placeholder: 'Search a cinema',\n      value: state.single,\n      onChange: handleChange('single')\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    } // style = {{display: 'inline'}}\n    ,\n    renderSuggestionsContainer: options => React.createElement(Paper, Object.assign({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465\n    },\n    __self: this\n  }))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492\n    },\n    __self: this\n  }, React.createElement(Select, {\n    value: values.movie,\n    onChange: handleSelectChange,\n    name: \"movie\",\n    displayEmpty: true,\n    className: classes.selectEmpty,\n    label: \"Movie\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501\n    },\n    __self: this\n  }, \"Select Movie\"), movieList.map((movie, index) => React.createElement(MenuItem, {\n    key: index,\n    value: movie.id,\n    name: \"movie\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  }, \" \", movie.title)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.button,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  }, \"Submit\")))));\n}","map":{"version":3,"sources":["/Users/syukrirahiman/OneDrive - Singapore Management University/React/movieapp/src/Plan.js"],"names":["React","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","makeStyles","Button","Grid","InputLabel","FormHelperText","FormControl","Select","axios","Redirect","BrowserRouter","Router","Route","Switch","HashRouter","withRouter","Link","observer","ReactDOM","suggestions","movieList","cityId","redirect","apikey","setMovieArr","input","result_id","length","i","cinema","label","toLowerCase","id","xhr","XMLHttpRequest","url","addEventListener","resp","JSON","responseText","movies","movie","push","console","log","open","send","constructCinemasSuggestions","cinemasArr","cinemas","name","city_id","renderInputComponent","inputProps","classes","inputRef","ref","other","node","renderSuggestion","suggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","getSuggestions","value","inputValue","trim","inputLength","count","filter","keep","slice","getSuggestionValue","useStyles","theme","root","height","flexGrow","display","flexWrap","paddingTop","marginBottom","formControl","margin","spacing","minWidth","selectEmpty","marginTop","width","container","position","suggestionsContainerOpen","zIndex","left","right","cursor","suggestionsList","padding","listStyleType","divider","button","IntegrationAutosuggest","useState","single","popper","showForm","state","setState","values","setValues","stateSuggestions","setSuggestions","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","event","newValue","handleSelectChange","oldValues","target","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","handleSubmit","preventDefault","formData","SearchBar","placeholder","onChange","options","containerProps","children","index","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { BrowserRouter as Router, Route, Switch, HashRouter, withRouter, Link } from 'react-router-dom';\nimport { observer } from 'mobx-react';\n\nimport ReactDOM from 'react-dom';\n\n\n\n\n\nconst suggestions = [];\nconst movieList = [];\nconst cityId = '';\nconst redirect = false;\nconst apikey = \"5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK\";\n\nfunction setMovieArr(input) {\n    var result_id = '';\n    movieList.length = 0;\n    for (let i = 0; i < suggestions.length; i++) {\n        var cinema = suggestions[i];\n        if (cinema.label.toLowerCase() == input.toLowerCase()) {\n            result_id = cinema.id;\n        }\n    }\n\n    if (result_id != '') {\n\n        var xhr = new XMLHttpRequest()\n        let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=\" + apikey;\n        xhr.addEventListener('load', () => {\n            // update the state of the component with the result here\n            var resp = JSON.parse(xhr.responseText);\n\n\n            for (let i = 0; i < resp.movies.length; i++) {\n                var movie = resp.movies[i];\n                movieList.push(movie);\n            }\n            console.log(movieList);\n            // var acinema = resp.cinemas[0];\n            // console.log(acinema.name);\n\n        })\n        xhr.open('GET', url)\n        xhr.send()\n\n    }\n\n\n}\n\n\nfunction constructCinemasSuggestions() {\n    var xhr = new XMLHttpRequest()\n    let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=\" + apikey;\n    xhr.addEventListener('load', () => {\n        // update the state of the component with the result here\n        var resp = JSON.parse(xhr.responseText);\n        //   this.setState({ results: resp.cinemas[0].location });\n        var cinemasArr = [];\n        suggestions.length = 0;\n        for (let i = 0; i < resp.cinemas.length; i++) {\n            var cinema = resp.cinemas[i];\n            suggestions.push({\n                label: cinema.name,\n                id: cinema.id,\n                city_id: cinema.city_id,\n            });\n        }\n        console.log(suggestions);\n        // var acinema = resp.cinemas[0];\n        // console.log(acinema.name);\n\n    })\n    xhr.open('GET', url)\n    xhr.send()\n\n}\n\nfunction renderInputComponent(inputProps) {\n    const { classes, inputRef = () => { }, ref, ...other } = inputProps;\n\n    return (\n        <TextField\n            name=\"cinema\"\n\n            InputProps={{\n                inputRef: node => {\n                    ref(node);\n                    inputRef(node);\n                },\n                classes: {\n                    input: classes.input,\n                },\n            }}\n            {...other}\n        />\n    );\n}\n\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\n    const matches = match(suggestion.label, query);\n    const parts = parse(suggestion.label, matches);\n\n    return (\n        <MenuItem selected={isHighlighted} component=\"div\">\n            <div>\n                {parts.map(part => (\n                    <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\n                        {part.text}\n                    </span>\n                ))}\n            </div>\n        </MenuItem>\n    );\n}\n\n\n\nfunction getSuggestions(value) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n\n    return inputLength === 0\n        ? []\n        : suggestions.filter(suggestion => {\n            const keep =\n                count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n            if (keep) {\n                count += 1;\n            }\n\n            return keep;\n        });\n}\n\nfunction getSuggestionValue(suggestion) {\n    return suggestion.label;\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: 100,\n        flexGrow: 1,\n        display: 'flex',\n        flexWrap: 'wrap',\n        // flexFlow: \"row wrap\",\n        // paddingLeft: 400,\n        paddingTop: 10,\n        marginBottom: 10,\n        // background: \"yellow\",\n        // opacity: 0.2,\n        // marginLeft: auto,\n        // marginRight: auto,\n        // width: 800,\n    },\n    formControl: {\n        margin: theme.spacing(3),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n        width: 250,\n    },\n    container: {\n        position: 'relative',\n    },\n    suggestionsContainerOpen: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: theme.spacing(1),\n        left: 0,\n        right: 0,\n        width: 250,\n    },\n    suggestion: {\n        display: 'block',\n        cursor: 'pointer',\n        // padding: '10px 20px',\n        // width:200,\n    },\n    suggestionsList: {\n        margin: 0,\n        padding: 0,\n        listStyleType: 'none',\n        // width: 500,\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    input: {\n        width: 250,\n    }\n}));\n\n\n\nexport default function IntegrationAutosuggest() {\n\n\n    const classes = useStyles();\n\n    const [state, setState] = React.useState({\n        single: '',\n        popper: '',\n        showForm: false,\n    });\n\n    const [values, setValues] = React.useState({\n        movie: '',\n    });\n\n\n    const [stateSuggestions, setSuggestions] = React.useState([]);\n\n\n\n    const handleSuggestionsFetchRequested = ({ value }) => {\n        setSuggestions(getSuggestions(value));\n    };\n\n\n    const handleSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    };\n\n    const handleChange = name => (event, { newValue }) => {\n        setState({\n            ...state,\n            [name]: newValue,\n        });\n        // console.log(newValue);\n        setMovieArr(newValue);\n        // setCityId(newValue);\n    };\n\n    const handleSelectChange = event => {\n\n        setValues(oldValues => ({\n            ...oldValues,\n            [event.target.name]: event.target.value,\n        }));\n    };\n\n    const autosuggestProps = {\n        renderInputComponent,\n        suggestions: stateSuggestions,\n        onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n        onSuggestionsClearRequested: handleSuggestionsClearRequested,\n        getSuggestionValue,\n        renderSuggestion,\n    };\n\n\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        console.log(\"cinema name: \", state.single, \"movie: \", values.movie);\n        const formData = { 'cinema': state.single, \"movie_id\": values.movie };\n\n\n        setState({\n            ...state,\n            ['showForm']: true,\n        });\n\n\n        console.log(state.showForm);\n\n    }\n\n    const SearchBar = () => {\n        return (\n            <Grid container justify=\"center\">\n                {constructCinemasSuggestions()}\n\n                <Grid>\n                    <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit}>\n\n                        <FormControl className={classes.formControl} >\n                            <Autosuggest\n\n                                {...autosuggestProps}\n                                inputProps={{\n                                    //   style: {display : 'inline'},\n                                    classes,\n                                    id: 'react-autosuggest-simple',\n                                    label: 'Cinema',\n                                    placeholder: 'Search a cinema',\n                                    value: state.single,\n                                    onChange: handleChange('single'),\n                                }}\n                                theme={{\n                                    container: classes.container,\n                                    suggestionsContainerOpen: classes.suggestionsContainerOpen,\n                                    suggestionsList: classes.suggestionsList,\n                                    suggestion: classes.suggestion,\n                                }}\n                                // style = {{display: 'inline'}}\n                                renderSuggestionsContainer={options => (\n                                    <Paper {...options.containerProps} square>\n                                        {options.children}\n                                    </Paper>\n                                )}\n                            />\n                        </FormControl>\n\n                        <FormControl className={classes.formControl}>\n                            <Select\n                                value={values.movie}\n                                onChange={handleSelectChange}\n                                name=\"movie\"\n                                displayEmpty\n                                className={classes.selectEmpty}\n                                label='Movie'\n                            >\n                                <MenuItem value=\"\" disabled>\n                                    Select Movie\n                    </MenuItem>\n                                {movieList.map((movie, index) =>\n                                    <MenuItem key={index} value={movie.id} name=\"movie\" > {movie.title}</MenuItem>\n                                )}\n                            </Select>\n\n                        </FormControl>\n\n                        <FormControl className={classes.formControl}>\n\n                            <Button variant=\"contained\" color=\"secondary\" className={classes.button} type=\"submit\">\n                                Submit\n            </Button>\n                        </FormControl>\n\n                    </form>\n                </Grid>\n            </Grid>);\n    }\n\n\n    if (state.showForm) {\n        return (\n\n            <div>\n                <Grid container justify=\"center\">\n                    {constructCinemasSuggestions()}\n\n                    <Grid>\n                        <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit}>\n\n                            <FormControl className={classes.formControl} >\n                                <Autosuggest\n\n                                    {...autosuggestProps}\n                                    inputProps={{\n                                        //   style: {display : 'inline'},\n                                        classes,\n                                        id: 'react-autosuggest-simple',\n                                        label: 'Cinema',\n                                        placeholder: 'Search a cinema',\n                                        value: state.single,\n                                        onChange: handleChange('single'),\n                                    }}\n                                    theme={{\n                                        container: classes.container,\n                                        suggestionsContainerOpen: classes.suggestionsContainerOpen,\n                                        suggestionsList: classes.suggestionsList,\n                                        suggestion: classes.suggestion,\n                                    }}\n                                    // style = {{display: 'inline'}}\n                                    renderSuggestionsContainer={options => (\n                                        <Paper {...options.containerProps} square>\n                                            {options.children}\n                                        </Paper>\n                                    )}\n                                />\n                            </FormControl>\n\n                            <FormControl className={classes.formControl}>\n                                <Select\n                                    value={values.movie}\n                                    onChange={handleSelectChange}\n                                    name=\"movie\"\n                                    displayEmpty\n                                    className={classes.selectEmpty}\n                                    label='Movie'\n                                >\n                                    <MenuItem value=\"\" disabled>\n                                        Select Movie\n                    </MenuItem>\n                                    {movieList.map((movie, index) =>\n                                        <MenuItem key={index} value={movie.id} name=\"movie\" > {movie.title}</MenuItem>\n                                    )}\n                                </Select>\n\n                            </FormControl>\n\n                            <FormControl className={classes.formControl}>\n\n                                <Button variant=\"contained\" color=\"secondary\" className={classes.button} type=\"submit\">\n                                    Submit\n            </Button>\n                            </FormControl>\n\n                        </form>\n                    </Grid>\n                </Grid>\n\n\n\n                <p>Contact Me</p>\n                <div>\n                    <form action=\"/action_page.php\">\n                        <label>First Name</label>\n                        <input type=\"text\" id=\"fname\" name=\"firstname\" placeholder=\"Your name..\" />\n                        <label>Last Name</label>\n                        <input type=\"text\" id=\"lname\" name=\"lastname\" placeholder=\"Your last name..\" />\n\n\n                        <label>Email</label>\n                        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your email\" />\n\n\n                        <label>Subject</label>\n                        <textarea id=\"subject\" name=\"subject\" placeholder=\"Write something..\"></textarea>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </form>\n                </div>\n\n            </div>);\n    }\n\n    return (\n        <Grid container justify=\"center\">\n            {constructCinemasSuggestions()}\n\n            <Grid>\n                <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit}>\n\n                    <FormControl className={classes.formControl} >\n                        <Autosuggest\n\n                            {...autosuggestProps}\n                            inputProps={{\n                                //   style: {display : 'inline'},\n                                classes,\n                                id: 'react-autosuggest-simple',\n                                label: 'Cinema',\n                                placeholder: 'Search a cinema',\n                                value: state.single,\n                                onChange: handleChange('single'),\n                            }}\n                            theme={{\n                                container: classes.container,\n                                suggestionsContainerOpen: classes.suggestionsContainerOpen,\n                                suggestionsList: classes.suggestionsList,\n                                suggestion: classes.suggestion,\n                            }}\n                            // style = {{display: 'inline'}}\n                            renderSuggestionsContainer={options => (\n                                <Paper {...options.containerProps} square>\n                                    {options.children}\n                                </Paper>\n                            )}\n                        />\n                    </FormControl>\n\n                    <FormControl className={classes.formControl}>\n                        <Select\n                            value={values.movie}\n                            onChange={handleSelectChange}\n                            name=\"movie\"\n                            displayEmpty\n                            className={classes.selectEmpty}\n                            label='Movie'\n                        >\n                            <MenuItem value=\"\" disabled>\n                                Select Movie\n                </MenuItem>\n                            {movieList.map((movie, index) =>\n                                <MenuItem key={index} value={movie.id} name=\"movie\" > {movie.title}</MenuItem>\n                            )}\n                        </Select>\n\n                    </FormControl>\n\n                    <FormControl className={classes.formControl}>\n\n                        <Button variant=\"contained\" color=\"secondary\" className={classes.button} type=\"submit\">\n                            Submit\n        </Button>\n                    </FormControl>\n\n                </form>\n            </Grid>\n        </Grid>\n    );\n\n}"]},"metadata":{},"sourceType":"module"}