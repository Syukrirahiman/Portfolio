{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Syukri Rahiman\\\\React\\\\movieapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\Syukri Rahiman\\\\React\\\\movieapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"C:\\\\Users\\\\Syukri Rahiman\\\\React\\\\movieapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Syukri Rahiman\\\\React\\\\movieapp\\\\src\\\\SearchBar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Popper from '@material-ui/core/Popper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nconst suggestions = [];\nconst movieList = [];\nconst cityId = '';\n\nconst _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cinema = _React$useState2[0],\n      setCinema = _React$useState2[1];\n\nconst _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      movie = _React$useState4[0],\n      setMovie = _React$useState4[1];\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  console.log('Cinema:', cinema, 'Movie: ', m); // You should see email and password in console.\n  // ..code to submit form to backend here...\n}\n\nfunction setMovieArr(input) {\n  var result_id = '';\n  movieList.length = 0;\n\n  for (let i = 0; i < suggestions.length; i++) {\n    var cinema = suggestions[i];\n\n    if (cinema.label.toLowerCase() == input.toLowerCase()) {\n      result_id = cinema.id;\n    }\n  }\n\n  if (result_id != '') {\n    var xhr = new XMLHttpRequest();\n    let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK\";\n    xhr.addEventListener('load', () => {\n      // update the state of the component with the result here\n      var resp = JSON.parse(xhr.responseText); //   this.setState({ results: resp.cinemas[0].location });\n\n      for (let i = 0; i < resp.movies.length; i++) {\n        var movie = resp.movies[i];\n        movieList.push(movie);\n      }\n\n      console.log(movieList); // var acinema = resp.cinemas[0];\n      // console.log(acinema.name);\n    });\n    xhr.open('GET', url);\n    xhr.send();\n  }\n}\n\nfunction setCityId(input) {\n  var result_id = '';\n\n  for (let i = 0; i < suggestions.length; i++) {\n    var cinema = suggestions[i];\n\n    if (cinema.label.toLowerCase() == input.toLowerCase()) {\n      result_id = cinema.city_id;\n    }\n  }\n\n  const cityId = result_id;\n}\n\nfunction constructCinemasSuggestions() {\n  var xhr = new XMLHttpRequest();\n  let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK\";\n  xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    var resp = JSON.parse(xhr.responseText); //   this.setState({ results: resp.cinemas[0].location });\n\n    var cinemasArr = [];\n    suggestions.length = 0;\n\n    for (let i = 0; i < resp.cinemas.length; i++) {\n      var cinema = resp.cinemas[i];\n      suggestions.push({\n        label: cinema.name,\n        id: cinema.id,\n        city_id: cinema.city_id\n      });\n    }\n\n    console.log(suggestions); // var acinema = resp.cinemas[0];\n    // console.log(acinema.name);\n  });\n  xhr.open('GET', url);\n  xhr.send();\n}\n\nfunction renderInputComponent(inputProps) {\n  const classes = inputProps.classes,\n        _inputProps$inputRef = inputProps.inputRef,\n        inputRef = _inputProps$inputRef === void 0 ? () => {} : _inputProps$inputRef,\n        ref = inputProps.ref,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    name: \"cinema\",\n    value: cinema,\n    onInput: e => setCinema(e.target.value) //   fullWidth\n    // style = {{width:1000}}\n    ,\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }));\n}\n\nfunction renderSuggestion(suggestion, {\n  query,\n  isHighlighted\n}) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n  return React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, parts.map(part => React.createElement(\"span\", {\n    key: part.text,\n    style: {\n      fontWeight: part.highlight ? 500 : 400\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, part.text))));\n}\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 100,\n    flexGrow: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    // flexFlow: \"row wrap\",\n    paddingLeft: 300,\n    paddingTop: 10 // background: \"yellow\",\n    // opacity: 0.2,\n\n  },\n  formControl: {\n    margin: theme.spacing(3),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n    width: 250\n  },\n  container: {\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0,\n    width: 250\n  },\n  suggestion: {\n    display: 'block',\n    cursor: 'pointer' // padding: '10px 20px',\n    // width:200,\n\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none' // width: 500,\n\n  },\n  divider: {\n    height: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  input: {\n    width: 250\n  }\n}));\nexport default function IntegrationAutosuggest() {\n  const classes = useStyles(); // const [anchorEl, setAnchorEl] = React.useState(null);\n  //   const [values, setValues] = React.useState({\n  //     age: '',\n  //     name: 'hai',\n  //   });\n\n  const _React$useState5 = React.useState({\n    single: '',\n    popper: ''\n  }),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        state = _React$useState6[0],\n        setState = _React$useState6[1];\n\n  const _React$useState7 = React.useState({\n    movie: ''\n  }),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        values = _React$useState8[0],\n        setValues = _React$useState8[1];\n\n  const _React$useState9 = React.useState([]),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        stateSuggestions = _React$useState10[0],\n        setSuggestions = _React$useState10[1];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const handleSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const handleChange = name => (event, {\n    newValue\n  }) => {\n    setState(_objectSpread({}, state, {\n      [name]: newValue\n    })); // console.log(newValue);\n\n    setMovieArr(newValue);\n    setCityId(newValue);\n  };\n\n  const handleSelectChange = event => {\n    console.log(\"hi\");\n    setValues(oldValues => _objectSpread({}, oldValues, {\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n  const inputParsers = {\n    date(input) {\n      const _input$split = input.split('/'),\n            _input$split2 = _slicedToArray(_input$split, 3),\n            month = _input$split2[0],\n            day = _input$split2[1],\n            year = _input$split2[2];\n\n      return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n    },\n\n    uppercase(input) {\n      return input.toUpperCase();\n    },\n\n    number(input) {\n      return parseFloat(input);\n    }\n\n  }; // const handleSubmit = event => {\n  //     event.preventDefault();\n  //     // const form = event.target;\n  //     // const data = new FormData(form);\n  //     // for (let name of data.keys()) {\n  //     //   const input = form.elements[name];\n  //     //   const parserName = input.dataset.parse;\n  //     //   if (parserName) {\n  //     //     const parser = inputParsers[parserName];\n  //     //     const parsedValue = parser(data.get(name));\n  //     //     data.set(name, parsedValue);\n  //     //   }\n  //     // }\n  //     // console.log(data.movie);\n  //     // fetch('/api/form-submit-url', {\n  //     //   method: 'POST',\n  //     //   body: data,\n  //     // });\n  //     console.log('Cinema:', cinema, 'Movie: ', movie);\n  // }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, constructCinemasSuggestions(), React.createElement(\"form\", {\n    className: classes.root,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n    inputProps: {\n      //   style: {display : 'inline'},\n      classes,\n      id: 'react-autosuggest-simple',\n      label: 'Cinema',\n      placeholder: 'Search a cinema',\n      value: state.single,\n      onChange: handleChange('single'),\n      name: 'cinema'\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    } // style = {{display: 'inline'}}\n    ,\n    renderSuggestionsContainer: options => React.createElement(Paper, Object.assign({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368\n    },\n    __self: this\n  }, React.createElement(Select, {\n    value: values.movie,\n    onChange: handleSelectChange,\n    name: \"movie\",\n    displayEmpty: true,\n    className: classes.selectEmpty,\n    label: \"Movie\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377\n    },\n    __self: this\n  }, \"Select Movie\"), movieList.map((movie, index) => React.createElement(MenuItem, {\n    key: index,\n    value: movie.id,\n    name: \"movie\",\n    onInput: e => setMovie(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381\n    },\n    __self: this\n  }, \" \", movie.title)))), React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.button,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }, \"Show Showtimes\"))));\n}","map":{"version":3,"sources":["C:/Users/Syukri Rahiman/React/movieapp/src/SearchBar.js"],"names":["React","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","Popper","makeStyles","Button","InputLabel","FormHelperText","FormControl","Select","suggestions","movieList","cityId","useState","cinema","setCinema","movie","setMovie","handleSubmit","event","preventDefault","console","log","m","setMovieArr","input","result_id","length","i","label","toLowerCase","id","xhr","XMLHttpRequest","url","addEventListener","resp","JSON","responseText","movies","push","open","send","setCityId","city_id","constructCinemasSuggestions","cinemasArr","cinemas","name","renderInputComponent","inputProps","classes","inputRef","ref","other","e","target","value","node","renderSuggestion","suggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","getSuggestions","inputValue","trim","inputLength","count","filter","keep","slice","getSuggestionValue","useStyles","theme","root","height","flexGrow","display","flexWrap","paddingLeft","paddingTop","formControl","margin","spacing","minWidth","selectEmpty","marginTop","width","container","position","suggestionsContainerOpen","zIndex","left","right","cursor","suggestionsList","padding","listStyleType","divider","button","IntegrationAutosuggest","single","popper","state","setState","values","setValues","stateSuggestions","setSuggestions","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","newValue","handleSelectChange","oldValues","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputParsers","date","split","month","day","year","uppercase","toUpperCase","number","parseFloat","placeholder","onChange","options","containerProps","children","index","title"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport deburr from 'lodash/deburr';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst suggestions = [];\r\nconst movieList = [];\r\nconst cityId = '';\r\nconst [cinema, setCinema] = React.useState('');\r\nconst [movie, setMovie] = React.useState('');\r\n\r\n\r\nfunction handleSubmit(event) {\r\n    event.preventDefault();\r\n    console.log( 'Cinema:', cinema, 'Movie: ', m); \r\n   // You should see email and password in console.\r\n   // ..code to submit form to backend here...\r\n\r\n}\r\n\r\nfunction setMovieArr(input) {\r\n    var result_id = '';\r\n    movieList.length = 0;\r\n    for (let i = 0; i < suggestions.length; i++) {\r\n        var cinema = suggestions[i];\r\n        if (cinema.label.toLowerCase() == input.toLowerCase()) {\r\n            result_id = cinema.id;\r\n        }\r\n    }\r\n\r\n    if (result_id != '') {\r\n\r\n        var xhr = new XMLHttpRequest()\r\n        let url = \"https://api.internationalshowtimes.com/v4/movies/?cinema_id=\" + result_id + \"&apikey=5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK\";\r\n        xhr.addEventListener('load', () => {\r\n            // update the state of the component with the result here\r\n            var resp = JSON.parse(xhr.responseText);\r\n\r\n            //   this.setState({ results: resp.cinemas[0].location });\r\n            for (let i = 0; i < resp.movies.length; i++) {\r\n                var movie = resp.movies[i];\r\n                movieList.push(movie);\r\n            }\r\n            console.log(movieList);\r\n            // var acinema = resp.cinemas[0];\r\n            // console.log(acinema.name);\r\n\r\n        })\r\n        xhr.open('GET', url)\r\n        xhr.send()\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction setCityId(input) {\r\n    var result_id = '';\r\n\r\n    for (let i = 0; i < suggestions.length; i++) {\r\n        var cinema = suggestions[i];\r\n        if (cinema.label.toLowerCase() == input.toLowerCase()) {\r\n            result_id = cinema.city_id;\r\n        }\r\n    }\r\n\r\n    const cityId = result_id;\r\n}\r\n\r\nfunction constructCinemasSuggestions() {\r\n    var xhr = new XMLHttpRequest()\r\n    let url = \"https://api.internationalshowtimes.com/v4/cinemas/?apikey=5ogMBOJo2nty7v7YNku1eZkxHEAdEJMK\";\r\n    xhr.addEventListener('load', () => {\r\n        // update the state of the component with the result here\r\n        var resp = JSON.parse(xhr.responseText);\r\n        //   this.setState({ results: resp.cinemas[0].location });\r\n        var cinemasArr = [];\r\n        suggestions.length = 0;\r\n        for (let i = 0; i < resp.cinemas.length; i++) {\r\n            var cinema = resp.cinemas[i];\r\n            suggestions.push({\r\n                label: cinema.name,\r\n                id: cinema.id,\r\n                city_id: cinema.city_id,\r\n            });\r\n        }\r\n        console.log(suggestions);\r\n        // var acinema = resp.cinemas[0];\r\n        // console.log(acinema.name);\r\n\r\n    })\r\n    xhr.open('GET', url)\r\n    xhr.send()\r\n\r\n}\r\n\r\nfunction renderInputComponent(inputProps) {\r\n    const { classes, inputRef = () => { }, ref, ...other } = inputProps;\r\n\r\n    return (\r\n        <TextField\r\n            name = \"cinema\"\r\n            value = {cinema}\r\n            onInput={e=>setCinema(e.target.value)}\r\n            //   fullWidth\r\n            // style = {{width:1000}}\r\n            InputProps={{\r\n                inputRef: node => {\r\n                    ref(node);\r\n                    inputRef(node);\r\n                },\r\n                classes: {\r\n                    input: classes.input,\r\n                },\r\n            }}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n    const matches = match(suggestion.label, query);\r\n    const parts = parse(suggestion.label, matches);\r\n\r\n    return (\r\n        <MenuItem selected={isHighlighted} component=\"div\">\r\n            <div>\r\n                {parts.map(part => (\r\n                    <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\r\n                        {part.text}\r\n                    </span>\r\n                ))}\r\n            </div>\r\n        </MenuItem>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction getSuggestions(value) {\r\n    const inputValue = deburr(value.trim()).toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    let count = 0;\r\n\r\n    return inputLength === 0\r\n        ? []\r\n        : suggestions.filter(suggestion => {\r\n            const keep =\r\n                count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n            if (keep) {\r\n                count += 1;\r\n            }\r\n\r\n            return keep;\r\n        });\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n    return suggestion.label;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: 100,\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        // flexFlow: \"row wrap\",\r\n        paddingLeft: 300,\r\n        paddingTop: 10,\r\n        // background: \"yellow\",\r\n        // opacity: 0.2,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(3),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n        width: 250,\r\n    },\r\n    container: {\r\n        position: 'relative',\r\n    },\r\n    suggestionsContainerOpen: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        marginTop: theme.spacing(1),\r\n        left: 0,\r\n        right: 0,\r\n        width: 250,\r\n    },\r\n    suggestion: {\r\n        display: 'block',\r\n        cursor: 'pointer',\r\n        // padding: '10px 20px',\r\n        // width:200,\r\n    },\r\n    suggestionsList: {\r\n        margin: 0,\r\n        padding: 0,\r\n        listStyleType: 'none',\r\n        // width: 500,\r\n    },\r\n    divider: {\r\n        height: theme.spacing(2),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n        width: 250,\r\n    }\r\n}));\r\n\r\n\r\n\r\nexport default function IntegrationAutosuggest() {\r\n    const classes = useStyles();\r\n    // const [anchorEl, setAnchorEl] = React.useState(null);\r\n    //   const [values, setValues] = React.useState({\r\n    //     age: '',\r\n    //     name: 'hai',\r\n    //   });\r\n\r\n    const [state, setState] = React.useState({\r\n        single: '',\r\n        popper: '',\r\n    });\r\n\r\n    const [values, setValues] = React.useState({\r\n        movie: '',\r\n    });\r\n\r\n\r\n    const [stateSuggestions, setSuggestions] = React.useState([]);\r\n\r\n\r\n\r\n    const handleSuggestionsFetchRequested = ({ value }) => {\r\n        setSuggestions(getSuggestions(value));\r\n    };\r\n\r\n\r\n    const handleSuggestionsClearRequested = () => {\r\n        setSuggestions([]);\r\n    };\r\n\r\n    const handleChange = name => (event, { newValue }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: newValue,\r\n        });\r\n        // console.log(newValue);\r\n        setMovieArr(newValue);\r\n        setCityId(newValue);\r\n    };\r\n\r\n    const handleSelectChange = event => {\r\n        console.log(\"hi\");\r\n        setValues(oldValues => ({\r\n            ...oldValues,\r\n            [event.target.name]: event.target.value,\r\n        }));\r\n    };\r\n\r\n    const autosuggestProps = {\r\n        renderInputComponent,\r\n        suggestions: stateSuggestions,\r\n        onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\r\n        onSuggestionsClearRequested: handleSuggestionsClearRequested,\r\n        getSuggestionValue,\r\n        renderSuggestion,\r\n    };\r\n\r\n    const inputParsers = {\r\n        date(input) {\r\n            const [month, day, year] = input.split('/');\r\n            return `${year}-${month}-${day}`;\r\n        },\r\n        uppercase(input) {\r\n            return input.toUpperCase();\r\n        },\r\n        number(input) {\r\n            return parseFloat(input);\r\n        },\r\n    };\r\n\r\n\r\n\r\n    // const handleSubmit = event => {\r\n    //     event.preventDefault();\r\n    //     // const form = event.target;\r\n    //     // const data = new FormData(form);\r\n\r\n    //     // for (let name of data.keys()) {\r\n    //     //   const input = form.elements[name];\r\n    //     //   const parserName = input.dataset.parse;\r\n\r\n    //     //   if (parserName) {\r\n    //     //     const parser = inputParsers[parserName];\r\n    //     //     const parsedValue = parser(data.get(name));\r\n    //     //     data.set(name, parsedValue);\r\n    //     //   }\r\n    //     // }\r\n\r\n    //     // console.log(data.movie);\r\n\r\n    //     // fetch('/api/form-submit-url', {\r\n    //     //   method: 'POST',\r\n    //     //   body: data,\r\n    //     // });\r\n\r\n    //     console.log('Cinema:', cinema, 'Movie: ', movie);\r\n\r\n    // }\r\n\r\n\r\n    return (\r\n\r\n        <div >\r\n            {constructCinemasSuggestions()}\r\n\r\n            <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit}>\r\n\r\n                <FormControl className={classes.formControl} >\r\n                    <Autosuggest\r\n\r\n                        {...autosuggestProps}\r\n                        inputProps={{\r\n                            //   style: {display : 'inline'},\r\n                            classes,\r\n                            id: 'react-autosuggest-simple',\r\n                            label: 'Cinema',\r\n                            placeholder: 'Search a cinema',\r\n                            value: state.single,\r\n                            onChange: handleChange('single'),\r\n                            name: 'cinema',\r\n                        }}\r\n                        theme={{\r\n                            container: classes.container,\r\n                            suggestionsContainerOpen: classes.suggestionsContainerOpen,\r\n                            suggestionsList: classes.suggestionsList,\r\n                            suggestion: classes.suggestion,\r\n                        }}\r\n                        // style = {{display: 'inline'}}\r\n                        renderSuggestionsContainer={options => (\r\n                            <Paper {...options.containerProps} square>\r\n                                {options.children}\r\n                            </Paper>\r\n                        )}\r\n                    />\r\n                </FormControl>\r\n\r\n                <FormControl className={classes.formControl}>\r\n                    <Select\r\n                        value={values.movie}\r\n                        onChange={handleSelectChange}\r\n                        name=\"movie\"\r\n                        displayEmpty\r\n                        className={classes.selectEmpty}\r\n                        label='Movie'\r\n                    >\r\n                        <MenuItem value=\"\" disabled>\r\n                            Select Movie\r\n                        </MenuItem>\r\n                        {movieList.map((movie, index) =>\r\n                            <MenuItem key={index} value={movie.id} name=\"movie\" onInput={e=>setMovie(e.target.value)}> {movie.title}\r\n                            \r\n                            </MenuItem>\r\n                        )}\r\n                    </Select>\r\n\r\n                </FormControl>\r\n\r\n                <FormControl className={classes.formControl}>\r\n\r\n                    <Button variant=\"contained\" color=\"secondary\" className={classes.button} type=\"submit\">\r\n                        Show Showtimes\r\n                </Button>\r\n\r\n                </FormControl>\r\n\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}